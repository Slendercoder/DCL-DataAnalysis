library(stats4)
library(stats4)
library(bbmle)
library(dplyr)#
library(ggplot2)#
library(gridExtra)#
library(beepr)
get_legend <- function(myggplot){#
  tmp <- ggplot_gtable(ggplot_build(myggplot))#
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")#
  legend <- tmp$grobs[[leg]]#
  return(legend)#
} # end get_legend
Nombre_Region <- function(x) {
if (x == '0' || x== '9') {#
    return('RS')#
  } else if (x == '1') {#
    return('RIGHT')#
  } else if (x == '2') {#
    return('NOTHING')#
  } else if (x == '3') {#
    return('DOWN')#
  } else if (x == '4') {#
    return('UP')#
  } else if (x == '5') {#
    return('LEFT')#
  } else if (x == '6') {#
    return('RIGHT')#
  } else if (x == '7') {#
    return('IN')#
  } else if (x == '8') {#
    return('OUT')#
  }#
} # end Nombre_Region
getRelFreqFRA <- function(i, s, k, df) {#
  # Obtains the relative frequencies for transition from region i and score s to region k#
  # Input: i, which is the region the player is currently in#
  #        s, which is the player's FRAsim obtained on the previous round#
  #        k, which is the region the player is going to#
  #        df, the dataframe from which the observations are obtained#
  # Output: Relative frequency#
  regs <- df[df$Region == i, ]#
  print('Starting from i')#
  print(regs)#
  regs <- regs[regs$FRASim == s, ]#
  print('with FRAsim s')#
  print(regs)#
  n <- dim(regs)[1]#
  regs <- regs[regs$RegionGo == k, ]#
  f <- dim(regs)[1]#
  cat('\ni', i, 's', s, 'k', k, 'n', n, 'f', f, 'ret', f/n)#
  return(f/n)#
#
} # end getRelFreqFRA
sigmoid <- function(x, beta, gamma) {#
  # Returns the value of the sigmoid function 1/(1+exp(b(x-c)))#
  return(1 / (1 + exp(-beta * (x - gamma))))#
} # end sigmoid
df1 = read.csv("../Python Codes/fraFreqs.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/fraFreqs.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/fraFreqs.csv", na.strings=c("","NA"))
df1$Region <- df1$Category
df1 <- df1[complete.cases(df1), ]
df1 <- df1[c('Region', 'FRASim', 'RegionGo')]
head(df1)
dfA <- df1[1:2, ]
dfA
dfA$Freqs <- apply(dfA, 1, function(x) {#
  i <- x[[1]][1]#
  s <- x[[2]][1]#
  k <- x[[3]][1]#
  cat('\ni', i, 's', s, 'k', k, '\n')#
  return(getRelFreqFRA(i, s, k, dfA))#
})
