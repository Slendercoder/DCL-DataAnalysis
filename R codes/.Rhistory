geom_line(aes(x = xs, y = fitFocal), dfB, color=FR_color, size=0.7)
return(plots)
} # plot_model_on_top_behavior
p <- plot_individual_behavior(df)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
p <- plot_model_on_top_behavior(thetaWS, thetaFR, p1, p2, p3)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
p <- plot_model_on_top_behavior(thetaWS, thetaFR, p1, p2, p3)
plot_model_on_top_behavior <- function(thetaWS, thetaFR, p1, p2, p3) {
plots <- list()
WS_color <- cbPalette[5]
FR_color <- cbPalette[7]
min_score = 0
legend2 <- get_legend_from_dummy1(WS_color, FR_color)
p1 <- plot_ModelTransitions_Focal(thetaWS, p1, WS_color)
p1 <- plot_ModelTransitions_Focal(thetaFR, p1, FR_color)
p1 <- grid.arrange(p1, bottom=legend2)
plots[[1]] <- p1
xs <- seq(0,2,length.out=200)
regs <- c('ALL', 'LEFT')
k <- regs[1]
print(paste("Plotting FRA model on FRAsim transition", k))
fitFocal <- sapply(xs, ModelProb, regionFrom='RS', regionGo=k, k=k, theta=thetaFR)
dfB <- data.frame(xs, fitFocal)
plots[[2]] <- p2 +
geom_line(aes(x = xs, y = fitFocal), dfB, color=FR_color, size=0.7)
k <- regs[2]
print(paste("Plotting FRA model on FRAsim transition", k))
fitFocal <- sapply(xs, ModelProb, regionFrom='RS', regionGo=k, k=k, theta=thetaFR)
dfB <- data.frame(xs, fitFocal)
plots[[3]] <- p3 +
geom_line(aes(x = xs, y = fitFocal), dfB, color=FR_color, size=0.7)
return(plots)
} # plot_model_on_top_behavior
p <- plot_individual_behavior(df)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
p <- plot_model_on_top_behavior(thetaWS, thetaFR, p1, p2, p3)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
# archivo <- "../Data/Confusion/Simulations/MB7.csv"
archivo <- "../Data/Confusion/Simulations/WS0.csv"
# archivo <- "../Data/Confusion/Simulations/FR7.csv"
# archivo <- "../Data/humans_only_absent.csv"
# archivo <- "../Data/high_performing_human_dyads.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
p <- plot_individual_behavior(df)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
print("Data prepared!")
parametros <- fitModels2Data(args)
print(parametros)
source("Model_Plots.R")
source("MODELpred.R")
fitModels2Data <- function(args) {
Trials <- 1
pars <- list(list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
print("Fitting MBiases...")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
print("Fitting FRA...")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
pars[[1]] <- f_MBi$par
}, error = function(e) {
print("Optimizer didn't work for MBiases")
pars <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
pars[[2]] <- f_WSLS$par
}, error = function(e) {
print("Optimizer didn't work for WSLS")
pars <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
pars[[3]] <- f_FRA$par
}, error = function(e) {
print("Optimizer didn't work for FRA")
pars <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
return(pars)
} # end fitModels2Data
plot_individual_behavior <- function(df){
plots <- list()
df$Region <- df$Category
print("Finding WS frequencies...")
df1 <- getRelFreq_Rows(df)
print(head(df1))
print("Plotting WS frequencies...")
plots[[1]] <- plot_FocalTransitions(df1)
# pl <- grid.arrange(pl, p, nrow=1)
print("Finding joint region...")
df1 <- find_joint_region(df)
print("Finding FRAsims...")
df1 <- get_FRASims(df1)
print("Plotting FRA frequencies...")
regs <- c('ALL', 'LEFT')
contador <- 2
for (k in regs){
print("Finding FRA frequencies...")
df2 <- getFreq_based_on_FRASim(df1,k)
print(head(df2))
plots[[contador]] <- plot_Transitions_FRASim_k(df2, k)
# pl <- grid.arrange(pl, p, nrow=1, widths=c((contador - 1)/contador, 1/contador))
contador <- contador + 1
}
return(plots)
} # end plot_individual_behavior
plot_model_on_top_behavior <- function(thetaWS, thetaFR, p1, p2, p3) {
plots <- list()
WS_color <- cbPalette[5]
FR_color <- cbPalette[7]
min_score = 0
legend2 <- get_legend_from_dummy1(WS_color, FR_color)
p1 <- plot_ModelTransitions_Focal(thetaWS, p1, WS_color)
p1 <- plot_ModelTransitions_Focal(thetaFR, p1, FR_color)
p1 <- grid.arrange(p1, bottom=legend2)
plots[[1]] <- p1
xs <- seq(0,2,length.out=200)
regs <- c('ALL', 'LEFT')
k <- regs[1]
print(paste("Plotting FRA model on FRAsim transition", k))
fitFocal <- sapply(xs, ModelProb, regionFrom='RS', regionGo=k, k=k, theta=thetaFR)
dfB <- data.frame(xs, fitFocal)
plots[[2]] <- p2 +
geom_line(aes(x = xs, y = fitFocal), dfB, color=FR_color, size=0.7)
k <- regs[2]
print(paste("Plotting FRA model on FRAsim transition", k))
fitFocal <- sapply(xs, ModelProb, regionFrom='RS', regionGo=k, k=k, theta=thetaFR)
dfB <- data.frame(xs, fitFocal)
plots[[3]] <- p3 +
geom_line(aes(x = xs, y = fitFocal), dfB, color=FR_color, size=0.7)
return(plots)
} # plot_model_on_top_behavior
# archivo <- "../Data/Confusion/Simulations/MB7.csv"
archivo <- "../Data/Confusion/Simulations/WS0.csv"
# archivo <- "../Data/Confusion/Simulations/FR7.csv"
# archivo <- "../Data/humans_only_absent.csv"
# archivo <- "../Data/high_performing_human_dyads.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
p <- plot_individual_behavior(df)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
print("Data prepared!")
fitModels2Data <- function(args) {
Trials <- 1
pars <- list(list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
print("Fitting MBiases...")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
print("Fitting FRA...")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
pars[[1]] <- f_MBi$par
}, error = function(e) {
print("Optimizer didn't work for MBiases")
pars[[1]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
pars[[2]] <- f_WSLS$par
}, error = function(e) {
print("Optimizer didn't work for WSLS")
pars[[2]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
pars[[3]] <- f_FRA$par
}, error = function(e) {
print("Optimizer didn't work for FRA")
pars[[3]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
return(pars)
} # end fitModels2Data
parametros <- fitModels2Data(args)
print(parametros)
thetaWS <- parametros[[2]]
thetaFR <- parametros[[3]]
p <- plot_model_on_top_behavior(thetaWS, thetaFR, p1, p2, p3)
thetaWS
thetaFR <- parametros[[3]]
thetaFR
p <- plot_model_on_top_behavior(thetaWS, thetaFR, p1, p2, p3)
p <- plot_model_on_top_behavior(thetaWS, thetaFR, p1, p2, p3)
p1 <- plot_ModelTransitions_Focal(thetaWS, p1, WS_color)
WS_color <- cbPalette[5]
p1 <- plot_ModelTransitions_Focal(thetaWS, p1, WS_color)
source("MODELpred.R")
source("Model_Plots.R")
p <- plot_model_on_top_behavior(thetaWS, thetaFR, p1, p2, p3)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
thetaFR
# archivo <- "../Data/Confusion/Simulations/MB7.csv"
archivo <- "../Data/Confusion/Simulations/WS3.csv"
# archivo <- "../Data/Confusion/Simulations/FR7.csv"
# archivo <- "../Data/humans_only_absent.csv"
# archivo <- "../Data/high_performing_human_dyads.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
p <- plot_individual_behavior(df)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
print("Data prepared!")
parametros <- fitModels2Data(args)
fitModels2Data <- function(args) {
Trials <- 1
pars <- list(list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
print("Fitting MBiases...")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
# print("Fitting FRA...")
# f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
pars[[1]] <- f_MBi$par
}, error = function(e) {
print("Optimizer didn't work for MBiases")
pars[[1]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
pars[[2]] <- f_WSLS$par
}, error = function(e) {
print("Optimizer didn't work for WSLS")
pars[[2]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
pars[[3]] <- f_FRA$par
}, error = function(e) {
print("Optimizer didn't work for FRA")
pars[[3]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
return(pars)
} # end fitModels2Data
# archivo <- "../Data/Confusion/Simulations/MB7.csv"
archivo <- "../Data/Confusion/Simulations/WS2.csv"
# archivo <- "../Data/Confusion/Simulations/FR7.csv"
# archivo <- "../Data/humans_only_absent.csv"
# archivo <- "../Data/high_performing_human_dyads.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
p <- plot_individual_behavior(df)
p1 <- p[[1]]
p2 <- p[[2]]
p3 <- p[[3]]
pl <- grid.arrange(p1, p2, p3, nrow=1)
source("Model_Plots.R")
source("MODELpred.R")
source("Model_Plots.R")
source("MODELpred.R")
fitModels2Data <- function(args) {
Trials <- 1
pars <- list(list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
# print("Fitting MBiases...")
# f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
# print("Fitting FRA...")
# f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
pars[[1]] <- f_MBi$par
}, error = function(e) {
print("Optimizer didn't work for MBiases")
pars[[1]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
pars[[2]] <- f_WSLS$par
}, error = function(e) {
print("Optimizer didn't work for WSLS")
pars[[2]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
pars[[3]] <- f_FRA$par
}, error = function(e) {
print("Optimizer didn't work for FRA")
pars[[3]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
return(pars)
} # end fitModels2Data
parametros <- fitModels2Data(args)
source("Model_Plots.R")
source("MODELpred.R")
source("Model_Plots.R")
source("MODELpred.R")
fitModels2Data <- function(args) {
Trials <- 1
pars <- list(list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
# print("Fitting MBiases...")
# f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
# print("Fitting FRA...")
# f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
pars[[1]] <- f_MBi$par
}, error = function(e) {
print("Optimizer didn't work for MBiases")
pars[[1]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
pars[[2]] <- f_WSLS$par
}, error = function(e) {
print("Optimizer didn't work for WSLS")
pars[[2]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
pars[[3]] <- f_FRA$par
}, error = function(e) {
print("Optimizer didn't work for FRA")
pars[[3]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
return(pars)
} # end fitModels2Data
# archivo <- "../Data/Confusion/Simulations/MB7.csv"
archivo <- "../Data/Confusion/Simulations/WS2.csv"
# archivo <- "../Data/Confusion/Simulations/FR7.csv"
# archivo <- "../Data/humans_only_absent.csv"
# archivo <- "../Data/high_performing_human_dyads.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
p <- plot_individual_behavior(df)
source("WSpred.R")
library(dfoptim)
library(bbmle)
library(beepr)
archivo <- "../Data/Confusion/Simulations/WS2.csv"
# archivo <- "../Data/humans_only_absent.csv"
df1 = read.csv(archivo, na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
source("WSpred.R")
args <- getArgs(df1)
args <- getFreq(df1)
head(df1)
source("WSpred.R")
args <- getFreq(df1)
head(df1)
# archivo <- "../Data/humans_only_absent.csv"
df1 = read.csv(archivo, na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getFreq(df1)
source("WSpred.R")
args <- getFreq(df1)
args <- args[order(-args$s, args$i),]
args
source("WSpred.R")
library(dfoptim)
library(bbmle)
library(beepr)
archivo <- "../Data/Confusion/Simulations/WS2.csv"
# archivo <- "../Data/humans_only_absent.csv"
df1 = read.csv(archivo, na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getFreq(df1)
args <- args[order(-args$s, args$i),]
source("WSpred.R")
args <- getFreq(df1)
args
args <- args[order(-args$s, args$i),]
args <- args[order(-args$Score, args$Region),]
args <- getFreq(df1)
args
source("MODELpred.R")
parametros <- fitModels2Data(args)
source("Model_Plots.R")
source("MODELpred.R")
parametros <- fitModels2Data(args)
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
fitModels2Data <- function(args) {
Trials <- 1
pars <- list(list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)),
list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
# print("Fitting MBiases...")
# f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
print("Fitting WSLS...")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
# print("Fitting FRA...")
# f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
pars[[1]] <- f_MBi$par
}, error = function(e) {
print("Optimizer didn't work for MBiases")
pars[[1]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
pars[[2]] <- f_WSLS$par
}, error = function(e) {
print("Optimizer didn't work for WSLS")
pars[[2]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
pars[[3]] <- f_FRA$par
}, error = function(e) {
print("Optimizer didn't work for FRA")
pars[[3]] <- list(c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0))
})
return(pars)
} # end fitModels2Data
parametros <- fitModels2Data(args)
args
