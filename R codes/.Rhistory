library(dfoptim)
funt <- function(x, y) {
return(x + y - 1)
}
funt(0, 0)
funt(1, 0)
funt <- function(x, y) {
return(x + y + 1)
}
funt(1, 0)
funt(0, 0)
funt(0, 0)
lower_limits = c(0, 0)
upper_limits = c(1, 1)
fitresFRA <- mle2(function(a1, a2) funt(c(a1, a2),
1),
start = list(a1=1,
a2=1),
lower=lower_limits,
upper=upper_limits,
method="L-BFGS-B")
librry(bbmle)
library(bbmle)
fitresFRA <- mle2(function(a1, a2) funt(c(a1, a2),
1),
start = list(a1=1,
a2=1),
lower=lower_limits,
upper=upper_limits,
method="L-BFGS-B")
fitresFRA <- mle2(function(a1, a2) funt(a1, a2, 1),
start = list(a1=1,
a2=1),
lower=lower_limits,
upper=upper_limits,
method="L-BFGS-B")
args <- 1
funt <- function(x, y) {
return(x + y + args)
}
funt(0, 0)
lower_limits = c(0, 0)
upper_limits = c(1, 1)
fitresFRA <- mle2(function(a1, a2) funt(a1, a2, 1),
start = list(a1=1,
a2=1),
lower=lower_limits,
upper=upper_limits,
method="L-BFGS-B")
fitresFRA <- mle2(function(a1, a2) funt(a1, a2),
start = list(a1=1,
a2=1),
lower=lower_limits,
upper=upper_limits,
method="L-BFGS-B")
fitresFRA
args <- 1
funt <- function(x, y) {
return((1 - x) + y + args)
}
funt(0, 0)
lower_limits = c(0, 0)
upper_limits = c(1, 1)
fitresFRA <- mle2(function(a1, a2) funt(a1, a2),
start = list(a1=1,
a2=1),
lower=lower_limits,
upper=upper_limits,
method="L-BFGS-B")
fitresFRA
# A function to get deviance from WSLS and FRA models
FRAutil <- function(theta){
# Input: theta, parameter vector of length 11
#        data, the dataframe from which frequencies are obtained
# Output: Deviance of WSLSpred for all regions and scores
if (any(is.na(theta))) {
print('Incorrect parameters: ')
print(theta)
return(10000)
}
# Calculate the probabilities based on FRAWSpred
#  print('Calculating probabilities')
args <- args %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::mutate(probs = FRApred(Region,
RegionFULL,
Score,
RJcode,
theta)
)
# Calculate deviance
#  print('Calculating deviances')
args$dev <- mapply(function(x,y) dmultinom(x, prob = y), args$freqs, args$probs)
if (any(is.infinite(args$dev) | is.na(args$dev))) {
print('Incorrect dev: ')
#    new_DF <- args[is.infinite(args$dev), ]
#    print(new_DF)
#    print(theta)
#    print(head(args$probs))
#    print(head(args$freq))
#    print(head(args$dev))
return(10000)
}
a <- -sum(log(args$dev))
print(paste("Dev:", a))
return(a)
} # end FRAutil
source("FRApred.R")
setwd("~/Repositorios/DCL-DataAnalysis/R codes")
source("FRApred.R")
source("Model_Plots.R")
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df <- get_FRASims(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
head(df)
args <- getFreqFRA(df, theta)
head(args)
beep()
args1 <- args[1:50, ]
f <- searchBestFitMLE(args1, 1)
t
f <- searchBestFit(args1, 1)
source("FRApred.R")
f <- searchBestFit(args1, 1)
