}
gOTHER2OTHER
head(df)
df <- getRelFreq_Rows(df1)
df <- df[df$Region != 'RS', ]
head(df)
min_score <- 0
max_score <- 33
gOTHER2OTHER <- ggplot() +
scale_x_continuous(limits = c(min_score, max_score)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("Score") +
#  ylab("") +
ylab("Rel. Freq./Probability") +
ggtitle("Staying at same focal region") +
theme_bw()
regiones <- c('ALL')
for (other in regiones) {
df_Focal <- df[df$Region == other, ]
df_Focal <- df_Focal[df_Focal$RegionGo == other, ]
gOTHER2OTHER <- gOTHER2OTHER +
geom_point(aes(x = Score, y = Freqs), df_Focal, alpha = alpha, size=1.5)
}
gOTHER2OTHER
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
archivo <- "../Data/MBiases.csv"
df1 = read.csv(archivo)
df1$Exp <- as.character("MBiases")
df1$Region <- df1$Category
archivo <- "../Data/WSLS.csv"
df2 = read.csv(archivo)
df2$Exp <- as.character("WSLS")
df2$Region <- df2$Category
archivo <- "../Data/FRA.csv"
df3 = read.csv(archivo)
df3$Exp <- as.character("FRA")
df3$Region <- df3$Category
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
source("Model_Plots.R")
p <- plot_3set_comparison_WSLS(df1, df2, df3)
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
a <- data.frame(table(df1$Region))
a
df1
a <- table(df1$Region)
a
a <- table(df1$Category)
a
source("MBIASESpred.R")
library(dfoptim)
library(bbmle)
library(beepr)
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
freqs <- table(df1$Category)
f <- searchFit(params, freqs)
params <- c(0.05, 0.05, 0.05, 0.05)
f <- searchFit(params, freqs)
f
params <- c(0.01, 0.01, 0.01, 0.01)
f <- searchFit(params, freqs)
f
freqs
theta <- c(0.01, 0.01, 0.01, 0.01)
probs <- MBIASESpred(theta)
probs
freqs <- table(df1$Category)
freqs
u <- MBIASESutil(theta, freqs)
u
dev <- log(dmultinom(freqs, prob = probs))
dev
theta <- c(0.05, 0.05, 0.05, 0.05)
probs <- MBIASESpred(theta)
dev <- log(dmultinom(freqs, prob = probs))
dev
#source("Model_Plots.R")
source("FRApred.R")
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
#archivo <- "../Python Codes/Simulations/N1_full.csv"
#archivo <- "../Python Codes/Dyads/output-435-261.csv"
#archivo <- "N1_full.csv"
archivo <- "humans_only_absent.csv"
#archivo <- "output-435-261.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
args
args$freqs
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
freqs <- table(df1$Category)
freqs
freqs <- unlist(table(df1$Category))
freqs
dev <- log(dmultinom(freqs, prob = probs))
dev
freqs <- c(9,1,1,1,1,1,1,1,1)
theta <- c(0.05, 0.05, 0.05, 0.05)
probs <- MBIASESpred(theta)
probs
freqs <- c(12,1,1,1,1,1,1,1,1)
theta <- c(0.05, 0.05, 0.05, 0.05)
probs <- MBIASESpred(theta)
dev <- log(dmultinom(freqs, prob = probs))
dev
freqs <- table(df1$Category)
freqs <- c(12,1,1,1,1,1,1,1,1)
freqs
freqs <- data.frame(table(df1$Category))
freqs
freqs <- list(data.frame(table(df1$Category)))
freqs
a <- data.frame(table(df1$Category))
a
freqs <- list(a$Freq)
freqs
a <- data.frame(table(df1$Category))
freqs <- a$Freq
freqs
theta <- c(0.05, 0.05, 0.05, 0.05)
probs <- MBIASESpred(theta)
dev <- log(dmultinom(freqs, prob = probs))
dev
freqs <- c(12,1,1,1,1,1,1,1,1)
theta <- c(0.05, 0.05, 0.05, 0.05)
dev <- log(dmultinom(freqs, prob = probs))
dev
s <- sum(freqs)
s
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
a <- data.frame(table(df1$Category))
freqs <- a$Freq
s <- sum(freqs)
s
freqs1 <- freqs/s
freqs1
a <- data.frame(table(df1$Category))
a
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
df1$Region <- factor(df1$Category, levels = regiones)
a <- data.frame(table(df1$Region))
freqs <- a$Freq
freqs
freqs <- a$Freq
s <- sum(freqs)
freqs1 <- freqs/s
#freqs <- c(12,1,1,1,1,1,1,1,1)
theta <- c(0.05, 0.05, 0.05, 0.05)
freqs1
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
df1$Region <- factor(df1$Category, levels = regiones)
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
a <- data.frame(table(df1$Region))
a
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
df1$Category <- factor(df1$Category, levels = regiones)
a <- data.frame(table(df1$Category))
a
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
a <- data.frame(table(df1$Category))
a
source("MBIASESpred.R")
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
df1$Category <- factor(df1$Category, levels = regiones)
a <- data.frame(table(df1$Category))
a
freqs <- a$Freq
s <- sum(freqs)
freqs1 <- freqs/s
freqs1
theta <- c(0.05, 0.05, 0.05, 0.05)
probs <- MBIASESpred(theta)
dev <- log(dmultinom(freqs, prob = probs))
dev
f <- searchFit(params, freqs)
f
f <- searchBestFit(args, N=5, module="nmkb")
f <- searchBestFit(args, N=5)
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
df1$Category <- factor(df1$Category, levels = regiones)
a <- data.frame(table(df1$Category))
freqs <- a$Freq
theta <- c(0.05, 0.05, 0.05, 0.05)
source("MBIASESpred.R")
library(dfoptim)
library(bbmle)
library(beepr)
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
df1$Category <- factor(df1$Category, levels = regiones)
a <- data.frame(table(df1$Category))
freqs <- a$Freq
theta <- c(0.05, 0.05, 0.05, 0.05)
u <- MBIASESutil(theta, freqs)
u
f <- searchFit(theta, freqs)
f
f <- searchBestFit(args, N=5)
f <- searchBestFit(freqs, N=5)
f
source("MBIASESpred.R")
library(dfoptim)
library(bbmle)
library(beepr)
df1 = read.csv("../Data/MBiases.csv", na.strings=c("","NA"))
df1$Category <- factor(df1$Category, levels = regiones)
a <- data.frame(table(df1$Category))
freqs <- a$Freq
theta <- c(0.05, 0.05, 0.05, 0.05)
f <- searchBestFit(freqs, N=5)
f
source("MODELpred.R")
source("MODELpred.R")
archivo <- "../Data/MBiases.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
f_FRA <- searchBestFit_FRA(args, N=5, module="nmkb")
f_MBi <- searchBestFit_MBiases(args, N=5, module="nmkb")
f_FRA <- searchBestFit_FRA(args, N=5, module="nmkb")
args
df
print(head(df))
print(head(args))
args <- getFreqFRA(df, theta)
args <- getFreqFRA(df, theta)
source("MODELpred.R")
args <- getFreqFRA(df, theta)
source("MODELpred.R")
args <- getFreqFRA(df, theta)
source("MODELpred.R")
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
source("MODELpred.R")
archivo <- "../Data/MBiases.csv"
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
f_FRA <- searchBestFit_FRA(args, N=5, module="nmkb")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
Trials <- 1
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb")
source("MODELpred.R")
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
Trials <- 1
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
source("MODELpred.R")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
source("MODELpred.R")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
source("MODELpred.R")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
source("MODELpred.R")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
source("MODELpred.R")
fitModels2Data <- function(archivo) {
###############################################################
# Loading and preparing data...
###############################################################
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
###############################################################
# Parameter recovery...
###############################################################
Trials <- 1
cm <- c(1000000, 1000000, 1000000)
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb")
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb")
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb")
beep()
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
cm[1] <- f_MBi$value
print("--------------")
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
cm[2] <- f_WSLS$value
print("--------------")
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
cm[3] <- f_FRA$value
return(cm)
} # end fitModels2Data
archivo <- "../Data/MBiases.csv"
cm <- fitModels2Data(archivo)
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
theta <- c(0.05, 0.05, 0.05, 0.05, 0, 500, 0)
dev <- WSLSutil(theta[1], theta[2], theta[3], theta[4], theta[5], theta[6], theta[7])
dev
theta <- c(0.05, 0.05, 0.05, 0.05, 0, 500, 0)
f <- searchFit_WSLS_NMKB(theta, args)
theta <- c(0.05, 0.05, 0.05, 0.05, 0, 500, 0)
f <- searchFit_WSLS_NMKB(theta, args)
theta <- c(0.05, 0.05, 0.05, 0.05, 0, 500, 0)
f <- searchFit_WSLS_NMKB(theta, args)
theta <- c(0.05, 0.05, 0.05, 0.05, 0, 500, 0)
f <- searchFit_WSLS_NMKB(theta, args, 1)
t <- c(0.05, 0.05, 0.05, 0.05, 0, 500, 0)
WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7])
f <- nmkb(par=params,
fn = function(t) WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7]),
lower=lower_limits[1:7],
upper=upper_limits[1:7],
control=list(trace=0))
params <- t
f <- nmkb(par=params,
fn = function(t) WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7]),
lower=lower_limits[1:7],
upper=upper_limits[1:7],
control=list(trace=0))
lower_limits[1:7]
upper_limits[1:7]
t <- c(0.05, 0.05, 0.05, 0.05, 1, 500, 0)
WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7])
params <- t
f <- nmkb(par=params,
fn = function(t) WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7]),
lower=lower_limits[1:7],
upper=upper_limits[1:7],
control=list(trace=0))
t <- c(0.05, 0.05, 0.05, 0.05, 1, 500, 1)
WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7])
params <- t
f <- nmkb(par=params,
fn = function(t) WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7]),
lower=lower_limits[1:7],
upper=upper_limits[1:7],
control=list(trace=0))
t <- c(0.05, 0.05, 0.05, 0.05, 1, 1, 1)
WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7])
params <- t
f <- nmkb(par=params,
fn = function(t) WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7]),
lower=lower_limits[1:7],
upper=upper_limits[1:7],
control=list(trace=0))
t <- c(0.05, 0.05, 0.05, 0.05, 1, 499, 1)
WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7])
params <- t
f <- nmkb(par=params,
fn = function(t) WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7]),
lower=lower_limits[1:7],
upper=upper_limits[1:7],
control=list(trace=0))
t <- c(0.05, 0.05, 0.05, 0.05, 1, 499.9, 1)
WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7])
params <- t
f <- nmkb(par=params,
fn = function(t) WSLSutil(t[1],
t[2],
t[3],
t[4],
t[5],
t[6],
t[7]),
lower=lower_limits[1:7],
upper=upper_limits[1:7],
control=list(trace=0))
f
cm <- c(1,2,3)
a <- data.frame(cm)
a
a <- data.frame(cm, "A")
a
cm <- c(1,2,3)
a <- data.frame(cm)
b <- rbind(data.frame(cm), a)
b
b <- cbind(data.frame(cm), a)
b
model <- c('MBiases', 'WSLS', 'FRA')
a <- data.frame(cm)
b <- cbind(data.frame(cm), a)
model <- c('MBiases', 'WSLS', 'FRA')
matriz <- data.frame(model)
matriz
matriz <- cbind(data.frame(cm), matriz)
matriz
model <- c('MBiases', 'WSLS', 'FRA')
matriz <- data.frame(model)
matriz <- cbind(matriz, data.frame(cm))
matriz
