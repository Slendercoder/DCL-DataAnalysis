a <- matrix(c(1, 0, 0, 0, 1, 0), c(3, 2))
a
a <- matrix(c(0, 1, 0, 0, 1, 0), c(3, 2))
a
a <- matrix(c(1, 1, 0, 0, 1, 0), c(3, 2))
a
dist(a)
a <- matrix(c(1, 1, 0, 0, 1, 1), c(3, 2))
a
dist(a)
dist(a)[1:2]
a <- matrix(c(1, 0, 0, 0, 1, 1), c(3, 2))
a
a <- matrix(c(1, 0, 0, 0, 1, 1), c(3, 2))
dist(a)[1:2]
dist(a)
vector_normal <- rnorm(30, 50, 10)
vector_normal[20] <- NA
vector_normal
mean(vector_normal)
vector_normal <- rnorm(30, 50, 10)
mean(vector_normal)
var(vector_normal)
sd(vector_normal)
mean(vector_normal)
vector_normal <- rnorm(30, 50, 10)
vector_normal[20] <- NA
var(vector_normal)
var(vector_normal, na.rm=TRUE)
m <- matrix(nrow=12, ncol=6)
v <- sample(300:650, 72)
v
m <- matrix(v, nrow=12, ncol=6)
m
v <- sample(300:650, 72, replace = T)
m <- matrix(v, nrow=12, ncol=6)
m
nombres_filas <- c("Enero", "Febrero",
"Marzo", "Abril", "Mayo", "Junio",
"Julio", "Agosto", "Septiembre",
"Octubre", "Noviembre", "Diciembre")
rownames(m) <- nombres_filas
m
x <- cor(m)
x
coefcorrel <- function(x) {
mmuestral <- sum(x)/len(x)
return(mmuestral)
}
coefcorrel(c(1:10))
mmuestral <- sum(x)/lenght(x)
coefcorrel <- function(x) {
mmuestral <- sum(x)/lenght(x)
return(mmuestral)
}
coefcorrel(c(1:10))
mmuestral <- sum(x)/length(x)
coefcorrel <- function(x) {
mmuestral <- sum(x)/length(x)
return(mmuestral)
}
coefcorrel(c(1:10))
setwd("~/Documents/DCL-DataAnalysis/R codes")
source("getFrequencies.R")
source("FRApred_full.R")
library(dfoptim)
library(beepr)
df1 = read.csv("../Python Codes/humans.csv")
head(df1)
getFreqFromGameFRA(df1)
data = read.csv("frequencies.csv")
head(data)
args <- getArgs(data, regiones)
library(ggplot2)
library(gridExtra)
library(Rmisc)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
df1 = read.csv("humans.csv")
df1$Exp <- as.character("Observed behavior")
#head(df1)
df2 = read.csv("../Python Codes/WSLS.csv")
df2$Exp <- as.character("WSLS")
#head(df2)
df3 = read.csv("../Python Codes/FRA.csv")
df3 = read.csv("../Python Codes/modelRecoveryFull.csv")
df3$Exp <- as.character("FRA")
df1 = read.csv("../Python Codes/Dyads/output-140-615.csv")
df1$Exp <- as.character("Observed behavior")
df1 = read.csv("humans.csv")
df1 = read.csv("humans.csv")
df1 = read.csv("humans.csv")
df1 = read.csv("humans.csv")
df1 = read.csv("humans.csv")
df1$Exp <- as.character("Observed behavior")
#head(df1)
df2 = read.csv("../Python Codes/WSLS.csv")
df2$Exp <- as.character("WSLS")
#head(df2)
df3 = read.csv("../Python Codes/FRA.csv")
df3 = read.csv("../Python Codes/modelRecoveryFull.csv")
df3$Exp <- as.character("FRA")
# Create single data frame with DLIndexes
df <- rbind(
df1[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
#        'Similarity_LAG1',
'Exp')],
df2[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
#        'Similarity_LAG1',
'Exp')],
df3[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
#        'Similarity_LAG1',
'Exp')]
)
df$Exp <- as.factor(df$Exp)
df$Exp <- factor(df$Exp, levels = c('Observed behavior', 'WSLS', 'FRA'))
head(df)
# Summarize data
dfc_DLIndex <- summarySE(df, measurevar="DLIndex", groupvars=c("Exp", "Round"))
head(dfc_DLIndex)
# Plot DLIndex with error regions
g1 <- ggplot(dfc_DLIndex, aes(x = Round, y = DLIndex, colour=Exp, group=Exp)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = DLIndex - sd,
ymax = DLIndex + sd), alpha = 0.2) +
scale_colour_manual(values = c("Observed behavior" = "#999999", "WSLS" = "#E69F00", "FRA" = "#56B4E9")) +
labs(color = "Source") +
xlab("Round (unicorn absent)") +
ylab("Division of labor") +
theme_bw()
g1
# Density plot
g2 <- ggplot(df, aes(DLIndex, colour=Exp, group=Exp)) +
geom_density(size=1) +
scale_colour_manual(values = c("Observed behavior" = "#999999", "WSLS" = "#E69F00", "FRA" = "#56B4E9")) +
#  scale_y_continuous(limits = c(0, 5)) +
labs(color = "Source of data") +
theme_bw()
g2
setwd("~/Documents/DCL-DataAnalysis/R codes")
library(ggplot2)
library(gridExtra)
library(Rmisc)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
df1 = read.csv("humans.csv")
df1$Exp <- as.character("Observed behavior")
#head(df1)
df2 = read.csv("../Python Codes/WSLS.csv")
df2$Exp <- as.character("WSLS")
#head(df2)
df3 = read.csv("../Python Codes/FRA.csv")
#df3 = read.csv("../Python Codes/modelRecoveryFull.csv")
df3$Exp <- as.character("FRA")
# Create single data frame with DLIndexes
df <- rbind(
df1[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
'Similarity_LAG1',
'Exp')],
df2[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
'Similarity_LAG1',
'Exp')],
df3[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
'Similarity_LAG1',
'Exp')]
)
df$Exp <- as.factor(df$Exp)
df$Exp <- factor(df$Exp, levels = c('Observed behavior', 'WSLS', 'FRA'))
head(df)
# Summarize data
dfc_DLIndex <- summarySE(df, measurevar="DLIndex", groupvars=c("Exp", "Round"))
head(dfc_DLIndex)
# Plot DLIndex with error regions
g1 <- ggplot(dfc_DLIndex, aes(x = Round, y = DLIndex, colour=Exp, group=Exp)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = DLIndex - sd,
ymax = DLIndex + sd), alpha = 0.2) +
scale_colour_manual(values = c("Observed behavior" = "#999999", "WSLS" = "#E69F00", "FRA" = "#56B4E9")) +
labs(color = "Source") +
xlab("Round (unicorn absent)") +
ylab("Division of labor") +
theme_bw()
g1
# Density plot
g2 <- ggplot(df, aes(DLIndex, colour=Exp, group=Exp)) +
geom_density(size=1) +
scale_colour_manual(values = c("Observed behavior" = "#999999", "WSLS" = "#E69F00", "FRA" = "#56B4E9")) +
#  scale_y_continuous(limits = c(0, 5)) +
labs(color = "Source of data") +
theme_bw()
g2
df1 = read.csv("humans.csv")
df1$Exp <- as.character("Observed behavior")
#head(df1)
df2 = read.csv("../Python Codes/WSLS.csv")
df2$Exp <- as.character("WSLS")
#head(df2)
df3 = read.csv("../Python Codes/FRA.csv")
#df3 = read.csv("../Python Codes/modelRecoveryFull.csv")
df3$Exp <- as.character("FRA")
# Create single data frame with DLIndexes
df <- rbind(
df1[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
'Similarity_LAG1',
'Exp')],
df2[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
'Similarity_LAG1',
'Exp')],
df3[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
'Similarity_LAG1',
'Exp')]
)
df$Exp <- as.factor(df$Exp)
df$Exp <- factor(df$Exp, levels = c('Observed behavior', 'WSLS', 'FRA'))
head(df)
# Summarize data
dfc_DLIndex <- summarySE(df, measurevar="DLIndex", groupvars=c("Exp", "Round"))
head(dfc_DLIndex)
# Plot DLIndex with error regions
g1 <- ggplot(dfc_DLIndex, aes(x = Round, y = DLIndex, colour=Exp, group=Exp)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = DLIndex - sd,
ymax = DLIndex + sd), alpha = 0.2) +
scale_colour_manual(values = c("Observed behavior" = "#999999", "WSLS" = "#E69F00", "FRA" = "#56B4E9")) +
labs(color = "Source") +
xlab("Round (unicorn absent)") +
ylab("Division of labor") +
theme_bw()
g1
# Density plot
g2 <- ggplot(df, aes(DLIndex, colour=Exp, group=Exp)) +
geom_density(size=1) +
scale_colour_manual(values = c("Observed behavior" = "#999999", "WSLS" = "#E69F00", "FRA" = "#56B4E9")) +
#  scale_y_continuous(limits = c(0, 5)) +
labs(color = "Source of data") +
theme_bw()
g2
data = read.csv("frequencies.csv")
head(data)
args <- getArgs(data, regiones)
df1 = read.csv("../Python Codes/humans.csv")
head(df1)
getFreqFromGameFRA(df1)
source("getFrequencies.R")
source("FRApred_full.R")
library(dfoptim)
library(beepr)
df1 = read.csv("../Python Codes/humans.csv")
head(df1)
getFreqFromGameFRA(df1)
data = read.csv("frequencies.csv")
head(data)
args <- getArgs(data, regiones)
args <- args[order(-args$s, args$i),]
write.csv(args, file = "args.csv", row.names = FALSE)
print('Args written in args.csv!')
# To search for best parameters FRA model
wAll <- 0.1 # bias All
wNoth <- 0.1 # bias Nothing
wLef <- 0.1 # bias Left, Right, Top, Bottom
wIn <- 0.1 # bias In, Out
w2 <- 10 # win stay
w3 <- 10 # steepness of sigmoid
w4 <- 10 # threshold of sigmoid
w5 <- 0.05 # delta
w6 <- 0.05 # exponential sim to complement
w7 <- 0.5 # zeta
w8 <- 0.05 # exponential sim to region
fitresFRA <- nmkb(par=c(wAll, wNoth, wLef, wIn, w2, w3, w4, w5, w6, w7, w8),
fn = function(theta) FRAutil(c(theta[1],
theta[2],
theta[3],
theta[4],
theta[5],
theta[6],
theta[7],
theta[8],
theta[9],
theta[10],
theta[11]), args, regiones),
lower=c(0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0),
upper=c(0.15,
0.15,
0.15,
0.15,
200,
30,
30,
15,
2,
10,
2),
control=list(trace=0))
beep()
print(fitresFRA$par)
print(fitresFRA$value)
# To search for best parameters FRA model
wAll <- 0.1 # bias All
wNoth <- 0.1 # bias Nothing
wLef <- 0.1 # bias Left, Right, Top, Bottom
wIn <- 0.1 # bias In, Out
w2 <- 10 # win stay
w3 <- 10 # steepness of sigmoid
w4 <- 10 # threshold of sigmoid
w5 <- 1 # delta
w6 <- 1 # exponential sim to complement
w7 <- 1 # zeta
w8 <- 1 # exponential sim to region
fitresFRA <- nmkb(par=c(wAll, wNoth, wLef, wIn, w2, w3, w4, w5, w6, w7, w8),
fn = function(theta) FRAutil(c(theta[1],
theta[2],
theta[3],
theta[4],
theta[5],
theta[6],
theta[7],
theta[8],
theta[9],
theta[10],
theta[11]), args, regiones),
lower=c(0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0),
upper=c(0.15,
0.15,
0.15,
0.15,
200,
30,
30,
15,
2,
10,
2),
control=list(trace=0))
beep()
fitresFRA <- nmkb(par=c(wAll, wNoth, wLef, wIn, w2, w3, w4, w5, w6, w7, w8),
fn = function(theta) FRAutil(c(theta[1],
theta[2],
theta[3],
theta[4],
theta[5],
theta[6],
theta[7],
theta[8],
theta[9],
theta[10],
theta[11]), args, regiones),
lower=c(0,
0,
0,
0,
0,
0,
0,
0,
0.5,
0,
0.5),
upper=c(0.15,
0.15,
0.15,
0.15,
200,
30,
30,
15,
2,
10,
2),
control=list(trace=0))
beep()
# To search for best parameters FRA model
wAll <- 0.12 # bias All
wNoth <- 0.12 # bias Nothing
wLef <- 0.12 # bias Left, Right, Top, Bottom
wIn <- 0.12 # bias In, Out
w2 <- 10 # win stay
w3 <- 10 # steepness of sigmoid
w4 <- 10 # threshold of sigmoid
w5 <- 1 # delta
w6 <- 1 # exponential sim to complement
w7 <- 1 # zeta
w8 <- 1 # exponential sim to region
fitresFRA <- nmkb(par=c(wAll, wNoth, wLef, wIn, w2, w3, w4, w5, w6, w7, w8),
fn = function(theta) FRAutil(c(theta[1],
theta[2],
theta[3],
theta[4],
theta[5],
theta[6],
theta[7],
theta[8],
theta[9],
theta[10],
theta[11]), args, regiones),
lower=c(0.1,
0.1,
0.1,
0.1,
8,
8,
8,
0.9,
0.5,
0.9,
0.5),
upper=c(0.15,
0.15,
0.15,
0.15,
200,
30,
30,
15,
2,
10,
2),
control=list(trace=0))
beep()
