# adding win stay only to focal regions
if (i != 'RS') {
attractiveness[index] <- attractiveness[index] + alpha * sigmoid(s, beta, gamma)
}
#  print('Attractiveness with WS:')
#  imprimir(attractiveness)
similarities <- lapply(regiones[3:9], function(x) {
f <- FRAsim(i, iV, j, x)
return(delta * sigmoid(f, epsilon, zeta))
})
similarities <- c(0, 0, unlist(similarities))
attractiveness <- attractiveness + similarities
return (attractiveness)
}
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
imprimir(xx)
u
FRApred <- function(i, iV, s, j,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta) {
# First we calculate the prior probabilities
aux <- c(wAll, wNoth, wLef, wLef, wLef, wLef, wIn, wIn)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
imprimir(bias)
# Start from biases
attractiveness <- bias
# Add WinStay
index <- which(regiones == i)
# adding win stay only to focal regions
if (i != 'RS') {
attractiveness[index] <- attractiveness[index] + alpha * sigmoid(s, beta, gamma)
}
#  print('Attractiveness with WS:')
#  imprimir(attractiveness)
similarities <- lapply(regiones[3:9], function(x) {
f <- FRAsim(i, iV, j, x)
return(delta * sigmoid(f, epsilon, zeta))
})
similarities <- c(0, 0, 0, unlist(similarities))
attractiveness <- attractiveness + similarities
return (attractiveness)
}
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
FRApred <- function(i, iV, s, j,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta) {
# First we calculate the prior probabilities
aux <- c(wAll, wNoth, wLef, wLef, wLef, wLef, wIn, wIn)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
imprimir(bias)
# Start from biases
attractiveness <- bias
# Add WinStay
index <- which(regiones == i)
# adding win stay only to focal regions
if (i != 'RS') {
attractiveness[index] <- attractiveness[index] + alpha * sigmoid(s, beta, gamma)
}
#  print('Attractiveness with WS:')
#  imprimir(attractiveness)
similarities <- lapply(regiones[4:9], function(x) {
f <- FRAsim(i, iV, j, x)
return(delta * sigmoid(f, epsilon, zeta))
})
similarities <- c(0, 0, 0, unlist(similarities))
attractiveness <- attractiveness + similarities
return (attractiveness)
}
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
imprimir(xx)
FRApred <- function(i, iV, s, j,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta) {
# First we calculate the prior probabilities
aux <- c(wAll, wNoth, wLef, wLef, wLef, wLef, wIn, wIn)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
imprimir(bias)
# Start from biases
attractiveness <- bias
# Add WinStay
index <- which(regiones == i)
# adding win stay only to focal regions
if (i != 'RS') {
attractiveness[index] <- attractiveness[index] + alpha * sigmoid(s, beta, gamma)
}
#  print('Attractiveness with WS:')
#  imprimir(attractiveness)
similarities <- lapply(regiones, function(x) {
f <- FRAsim(i, iV, j, x)
return(delta * sigmoid(f, epsilon, zeta))
})
similarities <- unlist(similarities)
attractiveness <- attractiveness + similarities
return (attractiveness)
}
wAll <- theta[1]
wNoth <- theta[2]
wLef <- theta[3]
wIn <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
delta <- theta[8]
epsilon <- theta[9]
zeta <- theta[10]
a <- args[1,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
FRAsim <- function(i, iV, j, k) {
# Returns the FRAsim of i and j with respect to focal k
#Input: i, the name of the region the player is in
#        iV (lettercode), the region the player is in
#        s, the player's score on the round
#        j  (lettercode), the overlapping region
#        k  (lettercode), a focal region
index1 <- which(regiones == k)
kCoded <- regionsCoded[index1 - 1] # regionsCoded does not have 'RS'
kV <- code2Vector(kCoded)
simil1 <- sim_consist(code2Vector(iV), kV)
if (k!='ALL' && k!='NOTHING') {
kVComp <- 1 - code2Vector(kCoded)
simil2 <- sim_consist(code2Vector(j), kVComp)
}
return (simil1 + simil2)
} # End FRAsim
source("FRApred.R")
FRApred <- function(i, iV, s, j,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta) {
# First we calculate the prior probabilities
aux <- c(wAll, wNoth, wLef, wLef, wLef, wLef, wIn, wIn)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
imprimir(bias)
# Start from biases
attractiveness <- bias
# Add WinStay
index <- which(regiones == i)
# adding win stay only to focal regions
if (i != 'RS') {
attractiveness[index] <- attractiveness[index] + alpha * sigmoid(s, beta, gamma)
}
#  print('Attractiveness with WS:')
#  imprimir(attractiveness)
similarities <- lapply(regiones[2:9], function(x) {
f <- FRAsim(i, iV, j, x)
return(delta * sigmoid(f, epsilon, zeta))
})
similarities <- c(0, unlist(similarities))
attractiveness <- attractiveness + similarities
return (attractiveness)
}
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
FRAsim <- function(i, iV, j, k) {
# Returns the FRAsim of i and j with respect to focal k
#Input: i, the name of the region the player is in
#        iV (lettercode), the region the player is in
#        s, the player's score on the round
#        j  (lettercode), the overlapping region
#        k  (lettercode), a focal region
index1 <- which(regiones == k)
kCoded <- regionsCoded[index1 - 1] # regionsCoded does not have 'RS'
kV <- code2Vector(kCoded)
simil <- sim_consist(code2Vector(iV), kV)
if (k!='ALL' && k!='NOTHING') {
kVComp <- 1 - code2Vector(kCoded)
simil2 <- sim_consist(code2Vector(j), kVComp)
simil <- simil + simil2
}
return (simil)
} # End FRAsim
source("FRApred.R")
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
FRAsim <- function(i, iV, j, k) {
# Returns the FRAsim of i and j with respect to focal k
#Input: i, the name of the region the player is in
#        iV (lettercode), the region the player is in
#        s, the player's score on the round
#        j  (lettercode), the overlapping region
#        k  (lettercode), a focal region
index1 <- which(regiones == k)
kCoded <- regionsCoded[index1 - 1] # regionsCoded does not have 'RS'
kV <- code2Vector(kCoded)
simil <- sim_consist(code2Vector(iV), kV)
if (k!='ALL' && k!='NOTHING') {
kVComp <- 1 - code2Vector(kCoded)
simil2 <- sim_consist(code2Vector(j), kVComp)
print(length(simil))
print(length(simil2))
simil <- simil + simil2
}
return (simil1 + simil2)
} # End FRAsim
source("FRApred.R")
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
a <- args[1,]
a
FRAsim <- function(i, iV, j, k) {
# Returns the FRAsim of i and j with respect to focal k
#Input: i, the name of the region the player is in
#        iV (lettercode), the region the player is in
#        s, the player's score on the round
#        j  (lettercode), the overlapping region
#        k  (lettercode), a focal region
index1 <- which(regiones == k)
kCoded <- regionsCoded[index1 - 1] # regionsCoded does not have 'RS'
kV <- code2Vector(kCoded)
simil <- sim_consist(code2Vector(iV), kV)
if (k!='ALL' && k!='NOTHING') {
kVComp <- 1 - code2Vector(kCoded)
simil2 <- sim_consist(code2Vector(j), kVComp)
print(length(simil))
print(length(simil2))
simil <- simil + simil2
}
return (simil + simil2)
} # End FRAsim
source("FRApred.R")
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
source("FRApred.R")
source("Model_Plots.R")
library(dfoptim)
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
#finding joint region
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
#df <- get_FRASims(df)
beep()
head(df)
alpha <- 0.3
min_score = 0
max_score = 2
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 0.7)
params <- para_visualizar(imprimir(theta))
args <- getFreqFRA(df, theta)
FRApred <- function(i, iV, s, j,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta) {
# First we calculate the prior probabilities
aux <- c(wAll, wNoth, wLef, wLef, wLef, wLef, wIn, wIn)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
imprimir(bias)
# Start from biases
attractiveness <- bias
# Add WinStay
index <- which(regiones == i)
# adding win stay only to focal regions
if (i != 'RS') {
attractiveness[index] <- attractiveness[index] + alpha * sigmoid(s, beta, gamma)
}
#  print('Attractiveness with WS:')
#  imprimir(attractiveness)
similarities <- lapply(regiones[2:9], function(x) {
f <- FRAsim(i, iV, j, x)
return(delta * sigmoid(f, epsilon, zeta))
})
similarities <- c(0, unlist(similarities))
attractiveness <- attractiveness + similarities
return (attractiveness)
}
wAll <- theta[1]
wNoth <- theta[2]
wLef <- theta[3]
wIn <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
delta <- theta[8]
epsilon <- theta[9]
zeta <- theta[10]
a <- args[1,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
source("FRApred.R")
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
source("FRApred.R")
source("Model_Plots.R")
library(dfoptim)
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
#finding joint region
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
#df <- get_FRASims(df)
beep()
head(df)
alpha <- 0.3
min_score = 0
max_score = 2
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 0.7)
params <- para_visualizar(imprimir(theta))
args <- getFreqFRA(df, theta)
head(args)
FRApred <- function(i, iV, s, j,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta) {
# First we calculate the prior probabilities
aux <- c(wAll, wNoth, wLef, wLef, wLef, wLef, wIn, wIn)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
imprimir(bias)
# Start from biases
attractiveness <- bias
# Add WinStay
index <- which(regiones == i)
# adding win stay only to focal regions
if (i != 'RS') {
attractiveness[index] <- attractiveness[index] + alpha * sigmoid(s, beta, gamma)
}
#  print('Attractiveness with WS:')
#  imprimir(attractiveness)
similarities <- lapply(regiones[2:9], function(x) {
f <- FRAsim(i, iV, j, x)
return(delta * sigmoid(f, epsilon, zeta))
})
similarities <- c(0, unlist(similarities))
attractiveness <- attractiveness + similarities
return (attractiveness)
}
wAll <- theta[1]
wNoth <- theta[2]
wLef <- theta[3]
wIn <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
delta <- theta[8]
epsilon <- theta[9]
zeta <- theta[10]
a <- args[1,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
x
y
z
u
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
xx
imprimir(xx)
a <- args[2,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
imprimir(xx)
FRApred <- function(i, iV, s, j,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta) {
# First we calculate the prior probabilities
aux <- c(wAll, wNoth, wLef, wLef, wLef, wLef, wIn, wIn)
# The probability of region 'RS' is 1 - the sum of the other probabilities
if (sum(aux) > 1) {
aux <- aux/sum(aux)
}
bias <- c(1 - sum(aux), aux)
#  imprimir(bias)
# Start from biases
attractiveness <- bias
# Add WinStay
index <- which(regiones == i)
# adding win stay only to focal regions
if (i != 'RS') {
attractiveness[index] <- attractiveness[index] + alpha * sigmoid(s, beta, gamma)
}
#  print('Attractiveness with WS:')
#  imprimir(attractiveness)
similarities <- lapply(regiones[2:9], function(x) {
f <- FRAsim(i, iV, j, x)
return(delta * sigmoid(f, epsilon, zeta))
})
similarities <- c(0, unlist(similarities))
attractiveness <- attractiveness + similarities
return (attractiveness)
}
wAll <- theta[1]
wNoth <- theta[2]
wLef <- theta[3]
wIn <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
delta <- theta[8]
epsilon <- theta[9]
zeta <- theta[10]
a <- args[2,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
imprimir(xx)
source("FRApred.R")
source("Model_Plots.R")
library(dfoptim)
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
#finding joint region
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
#df <- get_FRASims(df)
beep()
head(df)
alpha <- 0.3
min_score = 0
max_score = 2
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 0.7)
params <- para_visualizar(imprimir(theta))
args <- getFreqFRA(df, theta)
beep()
head(args)
wAll <- theta[1]
wNoth <- theta[2]
wLef <- theta[3]
wIn <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
delta <- theta[8]
epsilon <- theta[9]
zeta <- theta[10]
a <- args[2,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
imprimir(xx)
