bottom=legend_bottom)
df1 = read.csv("../Python Codes/Simulations/M5_full.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
#df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
df <- getRelFreq_Rows(df1)
#dfA <- unique(df)
head(df)
df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
#df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
df <- getRelFreq_Rows(df1)
#dfA <- unique(df)
head(df)
df <- getRelFreq_Rows(df1)
df <- getRelFreq_Rows(df1)
head(df)
source("WSpred.R")
df <- getRelFreq_Rows(df1)
head(df)
source("WSpred.R")
source("Model_Plots.R")
# True parameters:
thetaTRUE <- c(0.05, 0.05, 0.05, 0.05, 500, 500, 32)
min_score = 0
True_model_color = "#E69F00"
Recovered_model_color = "#009E73"
legend2 <- get_legend_from_dummy(True_model_color, Recovered_model_color)
df1 = read.csv("../Python Codes/Simulations/M5_full.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
#df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
args <- getFreq(df1)
args
df <- getRelFreq_Rows(df1)
head(df)
df1
# Obtains the relative frequencies for transition from region i and score s to region k
# Input: k, the region the player is going to
#        df, the dataframe from which the observations are obtained
# Output: Relative frequency
df <- df1
df <- df[complete.cases(df), ]
df$Region <- df$Category
df <- df[df2$RegionGo != "", ]
df
df <- df %>% select('Region', 'Score', 'RegionGo')
df
# Obtains the relative frequencies for transition from region i and score s to region k
# Input: k, the region the player is going to
#        df, the dataframe from which the observations are obtained
# Output: Relative frequency
df <- df1
df <- df[complete.cases(df), ]
df$Region <- df$Category
df <- df[df2$RegionGo != "", ]
df
# Obtains the relative frequencies for transition from region i and score s to region k
# Input: k, the region the player is going to
#        df, the dataframe from which the observations are obtained
# Output: Relative frequency
df <- df1
df
df <- df[complete.cases(df), ]
df
df$Region <- df$Category
df
df <- df[df2$RegionGo != "", ]
df
# Obtains the relative frequencies for transition from region i and score s to region k
# Input: k, the region the player is going to
#        df, the dataframe from which the observations are obtained
# Output: Relative frequency
df <- df1
df <- df[complete.cases(df), ]
df$Region <- df$Category
df
source("WSpred.R")
df1 = read.csv("../Python Codes/Simulations/M5_full.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
#df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
df <- getRelFreq_Rows(df1)
head(df)
d1 <- plot_RSTransitions(df)
d1 <- plot_ModelTransitions_RS(thetaTRUE, d1, True_model_color)
d1 <- plot_ModelTransitions_RS(theta, d1, Recovered_model_color)
d2 <- plot_FocalTransitions(df)
d2 <- plot_ModelTransitions_Focal(thetaTRUE, d2, True_model_color)
d2 <- plot_ModelTransitions_Focal(theta, d2, Recovered_model_color)
legend_bottom = paste("True:", para_visualizar(thetaTRUE), "Recovered:", para_visualizar(imprimir(theta)))
grid.arrange(d1, d2, nrow = 1,
top=legend2,
bottom=legend_bottom)
model_to_recover = "../Python Codes/Simulations/M5_full.csv"
model_recovered = "../Python Codes/Model_recovery/M5_recovered.csv"
model_corrected_and_recovered = "../Python Codes/Model_recovery/M5_corrected_and_recovered.csv"
plot_ModelRecovery_Dyad(model_to_recover, model_recovered)
source("Model_Plots.R")
True_model_color = "#E69F00"
Recovered_model_color = "#009E73"
Corrected_and_recovered_model_color = "#F0E442"
model_to_recover = "../Python Codes/Simulations/M5_full.csv"
model_recovered = "../Python Codes/Model_recovery/M5_recovered.csv"
model_corrected_and_recovered = "../Python Codes/Model_recovery/M5_corrected_and_recovered.csv"
plot_ModelRecovery_Dyad(model_to_recover,
model_recovered,
True_model_color,
Recovered_model_color)
d1 <- plot_RSTransitions(df)
d1 <- plot_ModelTransitions_RS(thetaTRUE, d1, True_model_color)
d1 <- plot_ModelTransitions_RS(theta, d1, Recovered_model_color)
d2 <- plot_FocalTransitions(df)
d2 <- plot_ModelTransitions_Focal(thetaTRUE, d2, True_model_color)
d2 <- plot_ModelTransitions_Focal(theta, d2, Recovered_model_color)
legend_bottom = paste("True:", para_visualizar(thetaTRUE), "Recovered:", para_visualizar(imprimir(theta)))
grid.arrange(d1, d2, nrow = 1,
top=legend2,
bottom=legend_bottom)
# Name of variables are not correct, but used here for convenience
True_model_color = "#E69F00"
Recovered_model_color = "#009E73"
Corrected_and_recovered_model_color = "#F0E442"
model_to_recover = "../Python Codes/Simulations/Sample_size/M5_full1.csv"
model_recovered = "../Python Codes/Simulations/Sample_size/M5_full2.csv"
model_corrected_and_recovered = "../Python Codes/Simulations/Sample_size/M5_full3.csv"
plot_Model_correction_and_recovery_Dyad(model_to_recover,
model_recovered,
model_corrected_and_recovered,
True_model_color,
Recovered_model_color,
Corrected_and_recovered_model_color)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 3)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 3)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 3)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 3)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 3)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 3)
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 6)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 6)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 6)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 6)
df
ruta = "../Python Codes/Simulations/Sample_size/sample"
N = 6
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
df
head(df)
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df$Exp <- as.character(i)
df1 <- df[c('Round', 'DLIndex', 'Exp')]
df <- rbind(df, df1)
}
head(df)
df$Exp
df$Exp <- as.factor(df$Exp)
df
df$Exp
N = 1
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df$Exp <- as.character(i)
df1 <- df[c('Round', 'DLIndex', 'Exp')]
df <- rbind(df, df1)
}
N = 2
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df$Exp <- as.character(i)
df1 <- df[c('Round', 'DLIndex', 'Exp')]
df <- rbind(df, df1)
}
head(df)
df$Exp <- as.factor(df$Exp)
df$Exp
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df$Exp <- as.character(i)
df1 <- df[c('Round', 'DLIndex', 'Exp')]
df <- rbind(df['Exp'], df1['Exp'])
}
head(df)
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df$Exp <- as.character(i)
df1 <- df[c('Round', 'DLIndex', 'Exp')]
df_aux <- rbind(df['Exp'], df1['Exp'])
}
head(df_aux)
df <- df[c('Round', 'DLIndex', 'Exp')]
df
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
df
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df1$Exp <- as.character(i)
df1 <- df[c('Round', 'DLIndex', 'Exp')]
df_aux <- rbind(df['Exp'], df1['Exp'])
}
head(df_aux)
df$Exp <- as.factor(df$Exp)
df$Exp
i
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df1$Exp <- as.character(i)
df1 <- df[c('Round', 'DLIndex', 'Exp')]
df <- rbind(df['Exp'], df1['Exp'])
}
head(df_aux)
df$Exp <- as.factor(df$Exp)
df$Exp
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
head(df)
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df1$Exp <- as.character(i)
df1 <- df1[c('Round', 'DLIndex', 'Exp')]
head(df1)
df <- rbind(df['Exp'], df1['Exp'])
}
head(df_aux)
df$Exp <- as.factor(df$Exp)
head(df)
df$Exp <- as.factor(df$Exp)
df$Exp
ruta = "../Python Codes/Simulations/Sample_size/sample"
N = 2
# Create single data frame
archivo = paste(ruta, 1, ".csv", sep="")
df = read.csv(archivo)
df$Exp <- as.character("1")
df <- df[c('Round', 'DLIndex', 'Exp')]
for (i in seq(2, N, by=1)) {
archivo = paste(ruta, i, ".csv", sep="")
df1 = read.csv(archivo)
df1$Exp <- as.character(i)
df1 <- df1[c('Round', 'DLIndex', 'Exp')]
df <- rbind(df, df1)
}
df$Exp <- as.factor(df$Exp)
# Summarize data
dfc_DLIndex <- summarySE(df, measurevar="DLIndex", groupvars=c("Exp", "Round"))
# Plot DLIndex with error regions
g1 <- ggplot(dfc_DLIndex, aes(x = Round, y = DLIndex, colour=Exp, group=Exp)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = DLIndex - sd,
ymax = DLIndex + sd), alpha = 0.2) +
xlab("Round (unicorn absent)") +
ylab("Division of labor") +
theme_bw() +
theme(legend.position="none")
# Density plot
g2 <- ggplot(df, aes(DLIndex, colour=Exp, group=Exp)) +
geom_density(size=1) +
#  scale_y_continuous(limits = c(0, 5)) +
xlab("Division of labor") +
theme_bw() +
theme(legend.position="none")
grid.arrange(g1, g2, nrow = 1)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 6)
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 11)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 11)
source("WSpred.R")
source("Model_Plots.R")
# True parameters:
thetaTRUE <- c(0.05, 0.05, 0.05, 0.05, 500, 500, 32)
min_score = 0
True_model_color = "#E69F00"
Recovered_model_color = "#009E73"
legend2 <- get_legend_from_dummy(True_model_color, Recovered_model_color)
#df1 = read.csv("../Python Codes/Simulations/M5_full.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
#df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
args <- getFreq(df1)
fitresWSLS <- searchBestFit(args, 50)
theta <- fitresWSLS$par
para_visualizar(imprimir(theta))
beep()
df <- getRelFreq_Rows(df1)
head(df)
d1 <- plot_RSTransitions(df)
d1 <- plot_ModelTransitions_RS(thetaTRUE, d1, True_model_color)
d1 <- plot_ModelTransitions_RS(theta, d1, Recovered_model_color)
d2 <- plot_FocalTransitions(df)
d2 <- plot_ModelTransitions_Focal(thetaTRUE, d2, True_model_color)
d2 <- plot_ModelTransitions_Focal(theta, d2, Recovered_model_color)
legend_bottom = paste("True:", para_visualizar(thetaTRUE), "Recovered:", para_visualizar(imprimir(theta)))
grid.arrange(d1, d2, nrow = 1,
top=legend2,
bottom=legend_bottom)
#df1 = read.csv("../Python Codes/Simulations/M5_full.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
#df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
args <- getFreq(df1)
fitresWSLS <- searchBestFit(args, 50)
theta <- fitresWSLS$par
para_visualizar(imprimir(theta))
beep()
model_to_recover = "../Python Codes/Simulations/M5_full.csv"
model_recovered = "../Python Codes/Model_recovery/M5_recovered_onlyA.csv"
plot_ModelRecovery_Dyad(model_to_recover,
model_recovered,
True_model_color,
Recovered_model_color)
model_recovered = "../Python Codes/Model_recovery/M5_recovered_ScoreC.csv"
plot_ModelRecovery_Dyad(model_to_recover,
model_recovered,
True_model_color,
Recovered_model_color)
model_recovered = "../Python Codes/Model_recovery/M5_recovered.csv"
plot_ModelRecovery_Dyad(model_to_recover,
model_recovered,
True_model_color,
Recovered_model_color)
model_recovered = "../Python Codes/Model_recovery/M5_recovered_ScoreC.csv"
plot_ModelRecovery_Dyad(model_to_recover,
model_recovered,
True_model_color,
Recovered_model_color)
model_recovered = "../Python Codes/Model_recovery/M5_corrected_and_recovered.csv"
plot_ModelRecovery_Dyad(model_to_recover,
model_recovered,
True_model_color,
Recovered_model_color)
fitresWSLS <- searchBestFit(args, 50)
theta <- fitresWSLS$par
para_visualizar(imprimir(theta))
df <- getRelFreq_Rows(df1)
head(df)
d1 <- plot_RSTransitions(df)
d1 <- plot_ModelTransitions_RS(thetaTRUE, d1, True_model_color)
d1 <- plot_ModelTransitions_RS(theta, d1, Recovered_model_color)
d2 <- plot_FocalTransitions(df)
d2 <- plot_ModelTransitions_Focal(thetaTRUE, d2, True_model_color)
d2 <- plot_ModelTransitions_Focal(theta, d2, Recovered_model_color)
#df1 = read.csv("../Python Codes/Simulations/M5_full.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
#df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
args <- getFreq(df1)
fitresWSLS <- searchBestFit(args, 50)
theta <- fitresWSLS$par
para_visualizar(imprimir(theta))
beep()
df <- getRelFreq_Rows(df1)
head(df)
d1 <- plot_RSTransitions(df)
d1 <- plot_ModelTransitions_RS(thetaTRUE, d1, True_model_color)
d1 <- plot_ModelTransitions_RS(theta, d1, Recovered_model_color)
d2 <- plot_FocalTransitions(df)
d2 <- plot_ModelTransitions_Focal(thetaTRUE, d2, True_model_color)
d2 <- plot_ModelTransitions_Focal(theta, d2, Recovered_model_color)
legend_bottom = paste("True:", para_visualizar(thetaTRUE), "Recovered:", para_visualizar(imprimir(theta)))
grid.arrange(d1, d2, nrow = 1,
top=legend2,
bottom=legend_bottom)
#df1 = read.csv("../Python Codes/Simulations/M5_full.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
#df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
args <- getFreq(df1)
fitresWSLS <- searchBestFit(args, 100)
theta <- fitresWSLS$par
para_visualizar(imprimir(theta))
beep()
df <- getRelFreq_Rows(df1)
head(df)
d1 <- plot_RSTransitions(df)
d1 <- plot_ModelTransitions_RS(thetaTRUE, d1, True_model_color)
d1 <- plot_ModelTransitions_RS(theta, d1, Recovered_model_color)
d2 <- plot_FocalTransitions(df)
d2 <- plot_ModelTransitions_Focal(thetaTRUE, d2, True_model_color)
d2 <- plot_ModelTransitions_Focal(theta, d2, Recovered_model_color)
legend_bottom = paste("True:", para_visualizar(thetaTRUE), "Recovered:", para_visualizar(imprimir(theta)))
grid.arrange(d1, d2, nrow = 1,
top=legend2,
bottom=legend_bottom)
#df1 = read.csv("../Python Codes/Simulations/M5_full.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Only_absent/M5_OnlyA.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/Data_correction/Score_correction/M5_ScoreC.csv")
df1 = read.csv("../Python Codes/Data_correction/Block_estimation/M5_Estimated.csv")
head(df1)
args <- getFreq(df1)
fitresWSLS <- searchBestFit(args, 100)
theta <- fitresWSLS$par
para_visualizar(imprimir(theta))
beep()
df <- getRelFreq_Rows(df1)
head(df)
d1 <- plot_RSTransitions(df)
d1 <- plot_ModelTransitions_RS(thetaTRUE, d1, True_model_color)
d1 <- plot_ModelTransitions_RS(theta, d1, Recovered_model_color)
d2 <- plot_FocalTransitions(df)
d2 <- plot_ModelTransitions_Focal(thetaTRUE, d2, True_model_color)
d2 <- plot_ModelTransitions_Focal(theta, d2, Recovered_model_color)
legend_bottom = paste("True:", para_visualizar(thetaTRUE), "Recovered:", para_visualizar(imprimir(theta)))
grid.arrange(d1, d2, nrow = 1,
top=legend2,
bottom=legend_bottom)
model_to_recover = "../Python Codes/Simulations/M5_full.csv"
model_recovered = "../Python Codes/Model_recovery/M5_corrected_and_recovered.csv"
plot_ModelRecovery_Dyad(model_to_recover,
model_recovered,
True_model_color,
Recovered_model_color)
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 100)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 100)
source("Model_Plots.R")
plot_sample_variation("../Python Codes/Simulations/Sample_size/sample", 100)
df_RS <- df[df$Region == 'RS', ]
df_RS
df_RS <- df_RS[df_RS$RegionGo != 'ALL', ]
df_RS <- df_RS[df_RS$RegionGo != 'NOTHING', ]
df_RS <- df_RS[df_RS$RegionGo != 'DOWN', ]
df_RS <- df_RS[df_RS$RegionGo != 'UP', ]
df_RS <- df_RS[df_RS$RegionGo != 'LEFT', ]
df_RS <- df_RS[df_RS$RegionGo != 'RIGHT', ]
df_RS <- df_RS[df_RS$RegionGo != 'IN', ]
df_RS <- df_RS[df_RS$RegionGo != 'OUT', ]
head(df_RS)
k = 'ALL'
color_a_usar <- cbPalette[which(regiones== k)]
regiones <- c('RS',
'ALL',
'NOTHING',
'DOWN',
'UP',
'LEFT',
'RIGHT',
'IN',
'OUT')
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
color_a_usar <- cbPalette[which(regiones== k)]
color_a_usar
gOTHER2OTHER <- gOTHER2OTHER +
geom_point(aes(x = FRASim, y = Freqs, group = Region, color = cbPalette), df_Focal, alpha = alpha, size=1.5)
cbPalette
k = regs[1]
