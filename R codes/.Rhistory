aux <- perDyad %>% ungroup
df1$vR <- aux$visitedRegion
head(df1)
# Build the frequency table for each (i,j,s) triple
auxDF <- data.frame(c('Dyad', NA),
c('Player', NA),
#                    c('Region', NA),
c('RegionFULL', NA),
#                    c('RegionGo', NA),
c('RJoint', NA),
c('Score', NA))
colnames(auxDF) = as.character(unlist(auxDF[1, ])) # the first row will be the header
auxDF = auxDF[-1, ]          # removing the first row.
auxDF = auxDF[-1, ]          # removing the first row.
parejas <- unique(df1$Dyad)
pareja <- parejas[1]
for (pareja in unique(df1$Dyad)) {
# Create the joint region
parejaDF <- df1[which(df1$Dyad == pareja), ]
parejaDF[order(parejaDF$Round), ]
jugador <- unique(parejaDF$Player)
r1 <- parejaDF$vR[which(parejaDF$Player == jugador[1])]
r2 <- parejaDF$vR[which(parejaDF$Player == jugador[2])]
newDF <- data.frame(rep(0, length(r1)))
newDF$a <- r1
newDF$b <- r2
lst <- as.list(as.data.frame(t(newDF)))
newDF$rJoint <- lapply(lst, function(x) as.numeric(unlist(x[2])) * as.numeric(unlist(x[3])))
# Create dataframe for first player
DF <- data.frame(seq(1, length(r1), by=1))
DF$Dyad <- rep(pareja, length(r1))
DF$Player <- rep(as.character(jugador[1]), length(r1))
DF$Region <- parejaDF$Category[which(parejaDF$Player == jugador[1])]
DF$RegionFULL <- parejaDF$vR[which(parejaDF$Player == jugador[1])]
DF$RegionGo <- lead(DF$Region, 1)
DF$RJoint <- newDF$rJoint
DF$Score <- parejaDF$Score[which(parejaDF$Player == jugador[1])]
DF <- DF[c('Dyad', 'Player', 'Region', 'RegionFULL', 'RegionGo', 'RJoint', 'Score')]
#  DF <- DF[c('Dyad', 'Player', 'RegionFULL', 'RJoint', 'Score')]
# Add dataframe to big dataframe
auxDF <- rbind(auxDF, DF)
#  auxDF <- na.omit(auxDF)
# Create dataframe for second player
DF <- data.frame(seq(1, length(r2), by=1))
DF$Dyad <- rep(pareja, length(r2))
DF$Player <- rep(as.character(jugador[2]), length(r2))
DF$Region <- parejaDF$Category[which(parejaDF$Player == jugador[2])]
DF$RegionFULL <- parejaDF$vR[which(parejaDF$Player == jugador[2])]
DF$RegionGo <- lead(DF$Region, 1)
DF$RJoint <- newDF$rJoint
DF$Score <- parejaDF$Score[which(parejaDF$Player == jugador[2])]
DF <- DF[c('Dyad', 'Player', 'Region', 'RegionFULL', 'RegionGo', 'RJoint', 'Score')]
#  DF <- DF[c('Dyad', 'Player', 'RegionFULL', 'RJoint', 'Score')]
# Add dataframe to big dataframe
auxDF <- rbind(auxDF, DF)
#  auxDF <- na.omit(auxDF)
}
# Create the joint region
parejaDF <- df1[which(df1$Dyad == pareja), ]
parejaDF
parejaDF[order(parejaDF$Round), ]
jugador <- unique(parejaDF$Player)
r1 <- parejaDF$vR[which(parejaDF$Player == jugador[1])]
r2 <- parejaDF$vR[which(parejaDF$Player == jugador[2])]
newDF <- data.frame(rep(0, length(r1)))
newDF$a <- r1
newDF$b <- r2
lst <- as.list(as.data.frame(t(newDF)))
newDF$rJoint <- lapply(lst, function(x) as.numeric(unlist(x[2])) * as.numeric(unlist(x[3])))
newDF
# Create dataframe for first player
DF <- data.frame(seq(1, length(r1), by=1))
DF$Dyad <- rep(pareja, length(r1))
DF$Player <- rep(as.character(jugador[1]), length(r1))
DF$Region <- parejaDF$Category[which(parejaDF$Player == jugador[1])]
DF$RegionFULL <- parejaDF$vR[which(parejaDF$Player == jugador[1])]
DF$RegionGo <- lead(DF$Region, 1)
DF$RJoint <- newDF$rJoint
DF$Score <- parejaDF$Score[which(parejaDF$Player == jugador[1])]
DF <- DF[c('Dyad', 'Player', 'Region', 'RegionFULL', 'RegionGo', 'RJoint', 'Score')]
DF
#df1 = read.csv("../Python Codes/output.csv")
df1 = read.csv("../Python Codes/humans.csv")
head(df1)
getFreqFromGameWS(df1)
head(df1)
getFreqFromGameWS(df1)
source("getFrequencies.R")
getFreqFromGameWS(df1)
data = read.csv('frequencies.csv')
args <- getArgs(data, regiones)
args <- args[order(-args$s, args$i),]
head(args)
# To search for best parameters WSLS model
w1 <- 0.035 # bias FOCAL
w2 <- 110 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regiones),
lower=c(0,
0),
upper=c(0.075,
200),
control=list(trace=0))
beep()
print(fitresWSLS$par)
print(fitresWSLS$value)
head(args)
#data = read.csv("../Python Codes/fileFreqs.csv")
head(data)
data = read.csv("frequencies.csv")
head(data)
args <- getArgs(data, regiones)
args <- args[order(-args$s, args$i),]
head(args)
source("FRApred.R")
args <- getArgs(data, regiones)
source("FRApred.R")
args <- getArgs(data, regiones)
source("FRApred.R")
args <- getArgs(data, regiones)
args <- args[order(-args$s, args$i),]
head(args)
head(args)
dim(args)
write.csv(args, file = "paraOptimFRA.csv", row.names = FALSE)
source("FRApred.R")
theta <- c(0.001, 130, 500, 0.98, 300, 1, 2, 1.5)
dev <- FRAutil(theta, args, regiones)
source("FRApred.R")
dev <- FRAutil(theta, args, regiones)
dev # ???
# To search for best parameters FRA model
w1 <- 0.035 # bias FOCAL
w2 <- 110 # win stay
w3 <- 1 # delta
w4 <- 1 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) FRAutil(c(w1,
w2,
500,
0.98,
w3,
1,
w4,
1.2), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
10,
10,
10),
control=list(trace=0))
# To search for best parameters FRA model
w1 <- 0.035 # bias FOCAL
w2 <- 130 # win stay
w3 <- 2 # delta
w4 <- 2 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) FRAutil(c(w1,
w2,
500,
0.98,
w3,
1,
w4,
1.2), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
10,
10,
10),
control=list(trace=0))
theta <- c(0.001, 130, 500, 0.98, 300, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 130, 500, 0.98, 300, 1, 2, 1.5)
dev <- FRAutil(theta, args, regiones)
dev # ???
# To search for best parameters FRA model
w1 <- 0.001 # bias FOCAL
w2 <- 130 # win stay
w3 <- 300 # delta
w4 <- 2 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) FRAutil(c(w1,
w2,
500,
0.98,
w3,
1,
w4,
1.2), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
10,
10,
10),
control=list(trace=0))
theta <- c(0.001, 130, 500, 0.98, 300, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 130, 500, 0.98, 100, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 1, 500, 0.98, 1, 1, 1, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
# To search for best parameters FRA model
w1 <- 0.001 # bias FOCAL
w2 <- 1 # win stay
w3 <- 1 # delta
w4 <- 1 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) FRAutil(c(w1,
w2,
500,
0.98,
w3,
1,
w4,
1.2), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
10,
10,
10),
control=list(trace=0))
beep()
print(fitresWSLS$par)
print(fitresWSLS$value)
print(fitresFRA$par)
print(fitresFRA$value)
# To search for best parameters FRA model
w1 <- 0.001 # bias FOCAL
w2 <- 3 # win stay
w3 <- 3 # delta
w4 <- 1 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) FRAutil(c(w1,
w2,
500,
0.98,
w3,
1,
w4,
1.2), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
10,
10,
10),
control=list(trace=0))
beep()
print(fitresFRA$par)
print(fitresFRA$value)
library(dfoptim)
# To search for best parameters FRA model
w1 <- 0.001 # bias FOCAL
w2 <- 3 # win stay
w3 <- 3 # delta
w4 <- 1 # zeta
# To search for best parameters FRA model
w1 <- 0.001 # bias FOCAL
w2 <- 8 # win stay
w3 <- 5 # delta
w4 <- 1 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) FRAutil(c(w1,
w2,
500,
0.98,
w3,
1,
w4,
1.2), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
10,
10,
10),
control=list(trace=0))
beep()
print(fitresFRA$par)
print(fitresFRA$value)
source("FRApred.R")
library(dfoptim)
library(beepr)
source("WSpred.R")
source("getFrequencies.R")
library(dfoptim)
library(beepr)
#df1 = read.csv("../Python Codes/output.csv")
df1 = read.csv("../Python Codes/humans.csv")
head(df1)
data = read.csv('frequencies.csv')
#data = read.csv("../Python Codes/fileFreqs.csv")
head(data)
args <- getArgs(data, regiones)
args <- args[order(-args$s, args$i),]
head(args)
# To search for best parameters WSLS model
w1 <- 0.035 # bias FOCAL
w2 <- 110 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regiones),
lower=c(0,
0),
upper=c(0.075,
200),
control=list(trace=0))
beep()
print(fitresWSLS$par)
print(fitresWSLS$value)
source("FRApred.R")
library(dfoptim)
library(beepr)
data = read.csv("frequencies.csv")
head(data)
args <- getArgs(data, regiones)
length(args$pair)
source("FRApred.R")
args <- getArgs(data, regiones)
args <- args[order(-args$s, args$i),]
head(args)
dim(args)
# To search for best parameters FRA model
w1 <- 0.001 # bias FOCAL
w2 <- 8 # win stay
w3 <- 10 # delta
w4 <- 1 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) FRAutil(c(w1,
w2,
500,
0.98,
w3,
1,
w4,
1.2), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
10,
10,
10),
control=list(trace=0))
beep()
print(fitresFRA$par)
print(fitresFRA$value)
theta <- c(0.001, 10, 500, 0.98, 10, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 10, 500, 0.98, 15, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 10, 500, 0.98, 7, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 8, 500, 0.98, 7, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 8, 500, 0.98, 5, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 8, 500, 0.98, 8, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
theta <- c(0.001, 7, 500, 0.98, 8, 1, 2, 1.2)
dev <- FRAutil(theta, args, regiones)
dev # ???
# To search for best parameters FRA model
w1 <- 0.001 # bias FOCAL
w2 <- 5 # win stay
w3 <- 7 # delta
w4 <- 1 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) FRAutil(c(theta[1],
theta[2],
500,
0.98,
theta[3],
1,
theta[4],
1.2), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
10,
10,
10),
control=list(trace=0))
beep()
print(fitresFRA$par)
print(fitresFRA$value)
# To search for best parameters FRA model
w1 <- 0.001 # bias FOCAL
w2 <- 5 # win stay
w3 <- 7 # delta
w4 <- 1 # zeta
w5 <- 1.2 # eta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4, w5),
fn = function(theta) FRAutil(c(theta[1],
theta[2],
500,
0.98,
theta[3],
1,
theta[4],
theta[5]), args, regiones),
lower=c(0,
0,
0,
0,
1),
upper=c(0.075,
10,
10,
3),
control=list(trace=0))
fitresFRA <- nmkb(par=c(w1, w2, w3, w4, w5),
fn = function(theta) FRAutil(c(theta[1],
theta[2],
500,
0.98,
theta[3],
1,
theta[4],
theta[5]), args, regiones),
lower=c(0,
0,
0,
0,
1),
upper=c(0.075,
10,
10,
10,
3),
control=list(trace=0))
print(fitresFRA$par)
print(fitresFRA$value)
data = read.csv('frequencies.csv')
#data = read.csv("../Python Codes/fileFreqs.csv")
head(data)
args <- getArgs(data, regiones)
source("WSpred.R")
source("getFrequencies.R")
library(dfoptim)
library(beepr)
data = read.csv('frequencies.csv')
#data = read.csv("../Python Codes/fileFreqs.csv")
head(data)
args <- getArgs(data, regiones)
args <- args[order(-args$s, args$i),]
head(args)
# To search for best parameters WSLS model
w1 <- 0.035 # bias FOCAL
w2 <- 110 # win stay
w3 <- 500 # beta
w4 <- 0.98 # gamma
fitresWSLS <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) WSutil(c(theta, 0, 0, 0, 0), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
200,
100,
1),
control=list(trace=0))
# To search for best parameters WSLS model
w1 <- 0.035 # bias FOCAL
w2 <- 50 # win stay
w3 <- 50 # beta
w4 <- 0.98 # gamma
fitresWSLS <- nmkb(par=c(w1, w2, w3, w4),
fn = function(theta) WSutil(c(theta, 0, 0, 0, 0), args, regiones),
lower=c(0,
0,
0,
0),
upper=c(0.075,
200,
100,
1),
control=list(trace=0))
beep()
print(fitresWSLS$par)
print(fitresWSLS$value)
print(fitresWSLS$value)
