source("FRApred.R")
source("Model_Plots.R")
setwd("~/Repositorios/DCL-DataAnalysis/R codes")
source("FRApred.R")
install.packages(dplyr)
install.packages("dplyr")
source("FRApred.R")
source("Model_Plots.R")
install.packages("dfoptim")
source("Model_Plots.R")
install.packages("bbmle")
source("FRApred.R")
source("Model_Plots.R")
install.packages("beepr")
source("FRApred.R")
source("Model_Plots.R")
install.packages("ggplot2")
source("FRApred.R")
source("Model_Plots.R")
install.packages("gridExtra")
source("Model_Plots.R")
install.packages("Rmisc")
source("Model_Plots.R")
library(dfoptim)
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df <- get_FRASims(df)
df <- find_joint_region(df)
df <- get_FRASims(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
head(df)
args <- getFreqFRA(df, theta)
head(args)
beep()
a <- args[2,]
a
a$freqs
source("FRApred.R")
args <- getFreqFRA(df, theta)
head(args)
a <- args[2,]
a$freqs
df <- df[c('RegionFULL', 'Score', 'RJcode', 'RegionGo')]
df
df$RegionGo <- factor(df$RegionGo, levels = regiones)
df
dfA <- df %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::summarize(Freqs = obtainFreqVector(RegionGo))
dfA
a <- dfA[2,]
a
a$freqs
a$Freqs
# df <- df[c('RegionFULL', 'Score', 'RJcode', 'RegionGo')]
df <- df[c('RegionFULL', 'RegionGo')]
df
df$RegionGo <- factor(df$RegionGo, levels = regiones)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df <- get_FRASims(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
head(df)
args <- getFreqFRA(df, theta)
head(args)
beep()
df1 <- df[c('RegionFULL', 'Score', 'RJcode', 'RegionGo')]
df1$RegionGo <- factor(df1$RegionGo, levels = regiones)
dfA <- df1[1:10, ]
dfA <- dfA %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::summarize(Freqs = obtainFreqVector(RegionGo))
dfA
dfA
obtainFreqVector <- function(x) {
a <- data.frame(table(x))
print(a)
return(list(a$Freq))
}
df1 <- df[c('RegionFULL', 'Score', 'RJcode', 'RegionGo')]
df1$RegionGo <- factor(df1$RegionGo, levels = regiones)
dfA <- df1[1:10, ]
dfA <- dfA %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::summarize(Freqs = obtainFreqVector(RegionGo))
dfA <- df1[1:2, ]
dfA <- dfA %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::summarize(Freqs = obtainFreqVector(RegionGo))
dfA <- df1[1:50, ]
dfA <- dfA %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::summarize(Freqs = obtainFreqVector(RegionGo))
dfA
dfA
df1 <- df[c('RegionFULL', 'Score', 'RJcode', 'RegionGo')]
df1$RegionGo <- factor(df1$RegionGo, levels = regiones)
dfA <- df1[1:50, ]
dfA
dfA <- df1[100:150, ]
dfA
args <- args %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::mutate(probs = FRApred(Region, RegionFULL, Score, RJcode,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)) %>%
ungroup()
wAll <- theta[1]
wNoth <- theta[2]
wLef <- theta[3]
wIn <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
delta <- theta[8]
epsilon <- theta[9]
zeta <- theta[10]
a <- args[2,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 0.7)
wAll <- theta[1]
wNoth <- theta[2]
wLef <- theta[3]
wIn <- theta[4]
alpha <- theta[5]
beta <- theta[6]
gamma <- theta[7]
delta <- theta[8]
epsilon <- theta[9]
zeta <- theta[10]
a <- args[2,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
imprimir(xx)
args <- args %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::mutate(probs = FRApred(Region, RegionFULL, Score, RJcode,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)) %>%
ungroup()
source("FRApred.R")
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
imprimir(xx)
args <- args %>%
dplyr::group_by(RegionFULL, Score, RJcode) %>%
dplyr::mutate(probs = FRApred(Region, RegionFULL, Score, RJcode,
wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)) %>%
ungroup()
args
f <- FRAutil(theta, args)
xx <- FRApred(x, y, z, u, wAll, wNoth, wLef, wIn,
alpha, beta, gamma,
delta, epsilon, zeta)
imprimir(xx)
source("FRApred.R")
source("Model_Plots.R")
library(dfoptim)
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df <- get_FRASims(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
head(df)
args <- getFreqFRA(df, theta)
head(args)
beep()
f <- FRAutil(theta, args)
source("FRApred.R")
a <- args[2,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, theta)
imprimir(xx)
source("FRApred.R")
###############################################################
# Parameter recovery...
###############################################################
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 0.7)
params <- para_visualizar(imprimir(theta))
###############################################################
# Parameter recovery...
###############################################################
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 0.7)
params <- para_visualizar(imprimir(theta))
a <- args[2,]
a <- a[c('Region', 'RegionFULL', 'Score', 'RJcode')]
x <- a$Region
y <- a$RegionFULL
z <- a$Score
u <- a$RJcode
xx <- FRApred(x, y, z, u, theta)
imprimir(xx)
f <- FRAutil(theta, args)
args <- args %>%
dplyr::group_by(Region, Score, RJcode) %>%
dplyr::mutate(probs = FRApred(Region,
RegionFULL,
Score,
RJcode,
theta)
)
warnings()
args1 <- args[1:5, ]
args1 <- args1 %>%
dplyr::group_by(Region, Score, RJcode) %>%
dplyr::mutate(probs = FRApred(Region,
RegionFULL,
Score,
RJcode,
theta)
)
args1
args1$probs
# Calculate deviance
#  print('Calculating deviances')
args$dev <- mapply(function(x,y) log(dmultinom(x, prob = y)), args$freq, args$probs)
# Calculate deviance
#  print('Calculating deviances')
args1$dev <- mapply(function(x,y) log(dmultinom(x, prob = y)), args$freq, args$probs)
# Calculate deviance
#  print('Calculating deviances')
args1$dev <- mapply(function(x,y) log(dmultinom(x, prob = y)), args$freqs, args$probs)
# Calculate deviance
#  print('Calculating deviances')
args1$dev <- mapply(function(x,y) log(dmultinom(x, prob = y)), args1$freqs, args1$probs)
args1$dev
source("FRApred.R")
f <- FRAutil(theta, args)
f
warnings()
args1 <- args[1:5, ]
args1 <- args1 %>%
dplyr::group_by(Region, Score, RJcode) %>%
dplyr::mutate(probs = FRApred(Region,
RegionFULL,
Score,
RJcode,
theta)
)
# Calculate deviance
#  print('Calculating deviances')
args1$dev <- mapply(function(x,y) log(dmultinom(x, prob = y)), args1$freqs, args1$probs)
args1$dev
source("FRApred.R")
f <- FRAutil(theta, args)
f
f <- searchFit(theta, args)
# To search for best parameters FRA model
w1 <- 0.1 # bias ALL
w2 <- 0.1 # bias NOTHING
w3 <- 0.1 # bias LEFT
w4 <- 0.1 # bias IN
w5 <- 0.05 # alpha
w6 <- 0.5 # beta
w7 <- 0.5 # gamma
w8 <- 0.5 # delta
w9 <- 0.5 # epsilon
w10 <- 0.5 # zeta
fitresFRA <- nmkb(par=c(w1, w2, w3, w4, w5, w6, w7, w8, w9, w10),
fn = function(theta) FRAutil(theta, args, regiones),
lower=c(0,
0,
0,
0,
0,
0,
0,
0,
0,
0),
upper=c(0.1,
0.1,
0.1,
0.1,
500,
1000,
10),
control=list(trace=0))
fitresFRA <- nmkb(par=c(w1, w2, w3, w4, w5, w6, w7, w8, w9, w10),
fn = function(theta) FRAutil(theta, args, regiones),
lower=c(0,
0,
0,
0,
0,
0,
0,
0,
0,
0),
upper=c(0.1,
0.1,
0.1,
0.1,
500,
1000,
32,
500,
1000,
2),
control=list(trace=0))
fitresFRA <- nmkb(par=c(w1, w2, w3, w4, w5, w6, w7, w8, w9, w10),
fn = function(theta) FRAutil(theta, args),
lower=c(0,
0,
0,
0,
0,
0,
0,
0,
0,
0),
upper=c(0.1,
0.1,
0.1,
0.1,
500,
1000,
32,
500,
1000,
2),
control=list(trace=0))
args1 <- args[1:50, ]
f <- FRAutil(theta, args1)
f
f <- searchFit(theta, args1)
source("FRApred.R")
f <- FRAutil(theta, args1)
f <- searchFit(theta, args1)
source("FRApred.R")
f <- FRAutil(theta, args1)
f <- searchFit(theta, args1)
source("FRApred.R")
source("Model_Plots.R")
library(dfoptim)
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df <- get_FRASims(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
head(df)
args <- getFreqFRA(df, theta)
head(args)
beep()
###############################################################
# Parameter recovery...
###############################################################
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 0.7)
params <- para_visualizar(imprimir(theta))
args1 <- args[1:50, ]
f <- FRAutil(theta, args1)
f <- searchFit(theta, args1)
source("FRApred.R")
f <- FRAutil(theta, args1)
f <- searchFit(theta, args1)
###############################################################
# Parameter recovery...
###############################################################
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 1)
params <- para_visualizar(imprimir(theta))
f <- searchFit(theta, args1)
f <- searchBestFit(theta, args1, 1)
f <- searchBestFit(theta, args1, 1)
f <- searchBestFit(args1, 1)
source("FRApred.R")
f <- searchBestFit(args1, 1)
###############################################################
# Plotting...
###############################################################
theta <- c(0.001, 0.001, 0.001, 0.001, 500, 500, 32, 500, 500, 0.7)
f <- searchBestFit(args1, 1)
source("FRApred.R")
source("FRApred.R")
f <- searchBestFit(args1, 1)
source("FRApred.R")
f <- searchBestFit(args1, 1)
source("FRApred.R")
f <- searchBestFit(args1, 1)
f <- searchBestFit(args1, 1)
source("FRApred.R")
f <- searchBestFit(args1, 1)
source("FRApred.R")
f <- searchBestFit(args1, 1)
source("FRApred.R")
f <- searchBestFit(args1, 1)
source("FRApred.R")
f <- searchBestFit(args1, 1)
