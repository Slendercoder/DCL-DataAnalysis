for (i in 1:length(x)) {
if (x[i]==1) {
code <- paste(code, letras[i], sep = '')
}
}
#  if (code=='') {code <- 'NOTHING'}
return(code)
}
# Code regions by letter
letras <- 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789;:'
letras <- strsplit(letras, split = '')
letras <- letras[[1]]
letterCode <- function(x, letras) {
code <- ''
for (i in 1:length(x)) {
if (x[i]==1) {
code <- paste(code, letras[i], sep = '')
}
}
#  if (code=='') {code <- 'NOTHING'}
return(code)
}
# Get visited tiles for each player
perDyad <- df1 %>% group_by(Dyad)
perPlayer <- perDyad %>% group_by(Player)
# Create vector for columns with region
columns <- c()
for (i in c(1:8)) {
for (j in c(1:8)) {
columns <- append(columns, paste('a', paste(i, j, sep=''), sep=''))
}
}
# Build the region column per player
perPlayer$visitedRegion <- lapply(as.list(as.data.frame(t(perPlayer[columns]))), function(x) x)
perDyad <- perPlayer %>% ungroup
aux <- perDyad %>% ungroup
df1$vR <- aux$visitedRegion
head(df1)
# Build the frequency table for each (i,j,s) triple
auxDF <- data.frame(c('Dyad', NA),
c('Player', NA),
#                    c('Region', NA),
c('RegionFULL', NA),
#                    c('RegionGo', NA),
c('RJoint', NA),
c('Score', NA))
colnames(auxDF) = as.character(unlist(auxDF[1, ])) # the first row will be the header
auxDF = auxDF[-1, ]          # removing the first row.
auxDF$RJoint <- list(0)
auxDF$Score <- 0
for (pareja in unique(df1$Dyad)) {
# Create the joint region
parejaDF <- df1[which(df1$Dyad == pareja), ]
parejaDF[order('Round'), ]
jugador <- unique(parejaDF$Player)
r1 <- parejaDF$vR[which(parejaDF$Player == jugador[1])]
r2 <- parejaDF$vR[which(parejaDF$Player == jugador[2])]
newDF <- data.frame(rep(0, length(r1)))
newDF$a <- r1
newDF$b <- r2
lst <- as.list(as.data.frame(t(newDF)))
newDF$rJoint <- lapply(lst, function(x) as.numeric(unlist(x[2])) * as.numeric(unlist(x[3])))
# Create dataframe for first player
DF <- data.frame(seq(1, length(r1), by=1))
DF$Dyad <- rep(pareja, length(r1))
DF$Player <- rep(as.character(jugador[1]), length(r1))
#  DF$Region <- parejaDF$Strategy[which(parejaDF$Player == jugador[1])]
DF$RegionFULL <- parejaDF$vR[which(parejaDF$Player == jugador[1])]
#  DF$RegionGo <- lead(DF$Region, 1)
DF$RJoint <- newDF$rJoint
DF$Score <- parejaDF$Score[which(parejaDF$Player == jugador[1])]
#  DF <- DF[c('Dyad', 'Player', 'Region', 'RegionFULL', 'RegionGo', 'RJoint', 'Score')]
DF <- DF[c('Dyad', 'Player', 'RegionFULL', 'RJoint', 'Score')]
# Add dataframe to big dataframe
auxDF <- rbind(auxDF, DF)
auxDF <- na.omit(auxDF)
# Create dataframe for second player
DF <- data.frame(seq(1, length(r2), by=1))
DF$Dyad <- rep(pareja, length(r2))
DF$Player <- rep(as.character(jugador[2]), length(r2))
#  DF$Region <- parejaDF$Strategy[which(parejaDF$Player == jugador[2])]
DF$RegionFULL <- parejaDF$vR[which(parejaDF$Player == jugador[2])]
#  DF$RegionGo <- lead(DF$Region, 1)
DF$RJoint <- newDF$rJoint
DF$Score <- parejaDF$Score[which(parejaDF$Player == jugador[2])]
#  DF <- DF[c('Dyad', 'Player', 'Region', 'RegionFULL', 'RegionGo', 'RJoint', 'Score')]
DF <- DF[c('Dyad', 'Player', 'RegionFULL', 'RJoint', 'Score')]
# Add dataframe to big dataframe
auxDF <- rbind(auxDF, DF)
auxDF <- na.omit(auxDF)
}
head(auxDF)
dim(auxDF)
auxDF$Player <- as.character(auxDF$Player)
# Code regions
lst <- as.list(as.data.frame(t(auxDF$RegionFULL)))
regionesFULL <- lapply(lst, function(x) {
cadena <- as.character(unlist(x))
letterCode(cadena, letras)
})
auxDF$Rcode <- regionesFULL
# Name regions
regionesCODIGOS <- lapply(auxDF$RegionFULL, function(x) {
r <- as.numeric(x)
classifyRegion(r, 0.3, 0.55)
})
auxDF$Region <- regionesCODIGOS
auxDF$RegionGo <- lead(auxDF$Region, 1)
# Code overlapping regions
lst <- as.list(as.data.frame(t(auxDF$RJoint)))
regionesJuntos <- lapply(lst, function(x) {
cadena <- as.character(unlist(x))
letterCode(cadena, letras)
})
auxDF$RJcode <- regionesJuntos
# summary(auxDF$Score)
# Divide the scores in three levels: 1 -> (-128, 13) | 2 -> (14, 27) | 3 -> (28, 32)
auxDF$scoreLevel <- sapply(auxDF$Score, function(x) {
if (x < 14) {return(1)}
else if (x < 28) {return(2)}
else {return(3)}
})
aux <- auxDF[c('Dyad', 'Player', 'Region', 'Rcode', 'RegionGo', 'RJcode', 'Score', 'scoreLevel')]
aux$scoreLevel <- as.factor(aux$scoreLevel)
aux$Region <- as.character(aux$Region)
aux$RegionGo <- as.character(aux$RegionGo)
aux$Rcode <- as.character(aux$Rcode)
aux$RJcode <- as.character(aux$RJcode)
head(aux)
write.csv(aux, file = f, row.names = FALSE)
getFreqs <- function(df1, f) {
# Get visited tiles for each player
perDyad <- df1 %>% group_by(Dyad)
perPlayer <- perDyad %>% group_by(Player)
# Create vector for columns with region
columns <- c()
for (i in c(1:8)) {
for (j in c(1:8)) {
columns <- append(columns, paste('a', paste(i, j, sep=''), sep=''))
}
}
# Build the region column per player
perPlayer$visitedRegion <- lapply(as.list(as.data.frame(t(perPlayer[columns]))), function(x) x)
perDyad <- perPlayer %>% ungroup
aux <- perDyad %>% ungroup
df1$vR <- aux$visitedRegion
head(df1)
# Build the frequency table for each (i,j,s) triple
auxDF <- data.frame(c('Dyad', NA),
c('Player', NA),
#                    c('Region', NA),
c('RegionFULL', NA),
#                    c('RegionGo', NA),
c('RJoint', NA),
c('Score', NA))
colnames(auxDF) = as.character(unlist(auxDF[1, ])) # the first row will be the header
auxDF = auxDF[-1, ]          # removing the first row.
auxDF$RJoint <- list(0)
auxDF$Score <- 0
for (pareja in unique(df1$Dyad)) {
# Create the joint region
parejaDF <- df1[which(df1$Dyad == pareja), ]
parejaDF[order('Round'), ]
jugador <- unique(parejaDF$Player)
r1 <- parejaDF$vR[which(parejaDF$Player == jugador[1])]
r2 <- parejaDF$vR[which(parejaDF$Player == jugador[2])]
newDF <- data.frame(rep(0, length(r1)))
newDF$a <- r1
newDF$b <- r2
lst <- as.list(as.data.frame(t(newDF)))
newDF$rJoint <- lapply(lst, function(x) as.numeric(unlist(x[2])) * as.numeric(unlist(x[3])))
# Create dataframe for first player
DF <- data.frame(seq(1, length(r1), by=1))
DF$Dyad <- rep(pareja, length(r1))
DF$Player <- rep(as.character(jugador[1]), length(r1))
#  DF$Region <- parejaDF$Strategy[which(parejaDF$Player == jugador[1])]
DF$RegionFULL <- parejaDF$vR[which(parejaDF$Player == jugador[1])]
#  DF$RegionGo <- lead(DF$Region, 1)
DF$RJoint <- newDF$rJoint
DF$Score <- parejaDF$Score[which(parejaDF$Player == jugador[1])]
#  DF <- DF[c('Dyad', 'Player', 'Region', 'RegionFULL', 'RegionGo', 'RJoint', 'Score')]
DF <- DF[c('Dyad', 'Player', 'RegionFULL', 'RJoint', 'Score')]
# Add dataframe to big dataframe
auxDF <- rbind(auxDF, DF)
auxDF <- na.omit(auxDF)
# Create dataframe for second player
DF <- data.frame(seq(1, length(r2), by=1))
DF$Dyad <- rep(pareja, length(r2))
DF$Player <- rep(as.character(jugador[2]), length(r2))
#  DF$Region <- parejaDF$Strategy[which(parejaDF$Player == jugador[2])]
DF$RegionFULL <- parejaDF$vR[which(parejaDF$Player == jugador[2])]
#  DF$RegionGo <- lead(DF$Region, 1)
DF$RJoint <- newDF$rJoint
DF$Score <- parejaDF$Score[which(parejaDF$Player == jugador[2])]
#  DF <- DF[c('Dyad', 'Player', 'Region', 'RegionFULL', 'RegionGo', 'RJoint', 'Score')]
DF <- DF[c('Dyad', 'Player', 'RegionFULL', 'RJoint', 'Score')]
# Add dataframe to big dataframe
auxDF <- rbind(auxDF, DF)
auxDF <- na.omit(auxDF)
}
head(auxDF)
dim(auxDF)
auxDF$Player <- as.character(auxDF$Player)
# Code regions
lst <- as.list(as.data.frame(t(auxDF$RegionFULL)))
regionesFULL <- lapply(lst, function(x) {
cadena <- as.character(unlist(x))
letterCode(cadena, letras)
})
auxDF$Rcode <- regionesFULL
# Name regions
regionesCODIGOS <- lapply(auxDF$RegionFULL, function(x) {
r <- as.numeric(x)
classifyRegion(r, 0.3, 0.55)
})
auxDF$Region <- regionesCODIGOS
auxDF$RegionGo <- lead(auxDF$Region, 1)
# Code overlapping regions
lst <- as.list(as.data.frame(t(auxDF$RJoint)))
regionesJuntos <- lapply(lst, function(x) {
cadena <- as.character(unlist(x))
letterCode(cadena, letras)
})
auxDF$RJcode <- regionesJuntos
# summary(auxDF$Score)
# Divide the scores in three levels: 1 -> (-128, 13) | 2 -> (14, 27) | 3 -> (28, 32)
auxDF$scoreLevel <- sapply(auxDF$Score, function(x) {
if (x < 14) {return(1)}
else if (x < 28) {return(2)}
else {return(3)}
})
aux <- auxDF[c('Dyad', 'Player', 'Region', 'Rcode', 'RegionGo', 'RJcode', 'Score', 'scoreLevel')]
aux$scoreLevel <- as.factor(aux$scoreLevel)
aux$Region <- as.character(aux$Region)
aux$RegionGo <- as.character(aux$RegionGo)
aux$Rcode <- as.character(aux$Rcode)
aux$RJcode <- as.character(aux$RJcode)
head(aux)
write.csv(aux, file = f, row.names = FALSE)
}
source("WSpred.R")
source("getFrequencies_test.R")
data = read.csv('../Python codes/output_50.csv')
head(data)
f <- "frequencies_test_50.csv"
df1 <- data
getFreqs(df1, f)
a <- getFreqs(df1, f)
head(a)
a <- read.csv(f)
head(a)
args <- getArgs(a)
head(args)
head(a)
args <- getArgs(a)
head(args)
theta <- c(0.03, 150, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev # 4758
theta <- c(0.055, 150, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev # 4758
theta <- c(0.055, 5, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev # 4758
theta <- c(0.05, 150, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev # 4758
# To search for bias FOCAL
w1 <- 0.035 # bias FOCAL
fitresWSLS <- nmkb(par=c(w1),
fn = function(theta) WSutil(c(theta, 150, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
fitresWSLS <- optimize(par=c(w1),
fn = function(theta) WSutil(c(theta, 150, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
fitresWSLS <- optimize(par=c(w1),
f = function(theta) WSutil(c(theta, 150, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
fitresWSLS <- optimize(par=c(w1),
f = function(theta) WSutil(c(theta, 150, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150))
fitresWSLS <- optimize(f = function(theta) WSutil(c(theta, 150, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150))
beep()
print(fitresWSLS$par)
fitresWSLS <- optimize(f = function(theta) WSutil(c(theta, 150, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150))
beep()
print(fitresWSLS$par)
print(fitresWSLS)
# To search for best parameters WSLS model
w1 <- 0.035 # bias FOCAL
w2 <- 110 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
beep()
print(fitresWSLS$par)
print(fitresWSLS$value)
pars <- fitresWSLS$par
errorPercBias <- (pars[1] - 0.05)/0.05
errorPercAlpha <- (pars[2] - 150)/150
errorPercBias
errorPercAlpha
pars
pars[2]
errorPercBias <- abs(pars[1] - 0.05)/0.05
errorPercAlpha <- abs(pars[2] - 150)/150
errorPercAlpha
errorPercBias
size <- 50
f <- paste('../Python codes/output_', as.character(size), ".csv", sep="")
f
a <- runOptim2(50)
runOptim2 <- function(size) {
f <- paste('../Python codes/output_', as.character(size), ".csv", sep="")
data = read.csv(f)
head(data)
f <- paste("frequencies_test_", as.character(size), ".csv", sep="")
df1 <- data
getFreqs(df1, f)
a <- read.csv(f)
head(a)
args <- getArgs(a)
head(args)
# To search for best parameters WSLS model
w1 <- 0.035 # bias FOCAL
w2 <- 110 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
pars <- fitresWSLS$par
errorPercBias <- abs(pars[1] - 0.05)/0.05
errorPercAlpha <- abs(pars[2] - 150)/150
dev <- fitresWSLS$value
return(c(pars, errorPercBias, errorPercAlpha, dev))
}
a <- runOptim2(50)
a
a <- a.append(runOptim2(100))
a <- list.append(runOptim2(100))
a <- append(a, runOptim2(100))
a
a <- runOptim2(50)
a <- list(a)
a
a <- append(a, list(runOptim2(100)))
a
runOptim2 <- function(size) {
f <- paste('../Python codes/output_', as.character(size), ".csv", sep="")
data = read.csv(f)
head(data)
f <- paste("frequencies_test_", as.character(size), ".csv", sep="")
df1 <- data
getFreqs(df1, f)
a <- read.csv(f)
head(a)
args <- getArgs(a)
head(args)
# To search for best parameters WSLS model
w1 <- 0.035 # bias FOCAL
w2 <- 110 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
pars <- fitresWSLS$par
errorPercBias <- abs(pars[1] - 0.05)/0.05
errorPercAlpha <- abs(pars[2] - 150)/150
dev <- fitresWSLS$value
return(c(size, pars, errorPercBias, errorPercAlpha, dev))
}
a <- list(runOptim2(50))
a <- append(a, list(runOptim2(100)))
a
a <- append(a, list(runOptim2(200)))
a <- append(a, list(runOptim2(300)))
a
a
a <- runOptim2(50)
b <- runOptim2(100)
c <- runOptim2(200)
d <- runOptim2(300)
a
b
c
d
d
size <- 200
f <- paste('../Python codes/output_', as.character(size), ".csv", sep="")
data = read.csv(f)
head(data)
f <- paste("frequencies_test_", as.character(size), ".csv", sep="")
df1 <- data
getFreqs(df1, f)
a <- read.csv(f)
head(a)
args <- getArgs(a)
head(args)
# To search for best parameters WSLS model
w1 <- 0.035 # bias FOCAL
w2 <- 110 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
# To search for best parameters WSLS model
w1 <- 0.03 # bias FOCAL
w2 <- 110 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
head(args)
# To search for best parameters WSLS model
w1 <- 0.03 # bias FOCAL
w2 <- 110 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
args <- getArgs(a)
head(args)
theta <- c(0.03, 150, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev
theta <- c(0.01, 150, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev
theta <- c(0.01, 5, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev
a
b
theta <- c(0.05, 3, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev
theta <- c(0.05, 5, 500, 0.98, 0, 0, 0, 0)
dev <- WSutil(theta, args, regions)
dev
# To search for best parameters WSLS model
w1 <- 0.05 # bias FOCAL
w2 <- 3 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
# To search for best parameters WSLS model
w1 <- 0.05 # bias FOCAL
w2 <- 3 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
# To search for best parameters WSLS model
w1 <- 0.05 # bias FOCAL
w2 <- 3.5 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 500, 0.98, 0, 0, 0, 0), args, regions),
lower=c(0,
0),
upper=c(0.075,
150),
control=list(trace=0))
