imprimir(f_WSLS$par)
parametros[[2]] <- c(label, 'WSLS', f_WSLS$par, rep(0,3))
devs[1] <- f_WSLS$value
}, error = function(e) {
print("Optimizer didn't work for WSLS")
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
parametros[[3]] <- c(label, 'FRA', f_FRA$par)
devs[3] <- f_FRA$value
}, error = function(e) {
print("Optimizer didn't work for FRA")
})
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Dyad', 'Model',
'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta')
data$dev <- devs
return(data)
} # end fitModels2Data
archivo <- "../Data/humans_only_absent.csv"
df = read.csv(archivo)
parejas <- unique(df$Dyad)[1:2]
###############################################################
# Fitting models to dyads...
###############################################################
parametros <- list(rep(0, 13), rep(0, 13))
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Dyad', 'Model',
'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta', 'dev')
data <- data[0,]
for (dyad in parejas) {
archivo <- paste("../Data/Dyads/output-", dyad, ".csv", sep="")
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
MB <- fitModels2Data(args, label=dyad)
data <- rbind(data, MB)
}
head(data)
head(data)
fitModels2Data <- function(args, contador=0, label) {
Trials <- 1
parametros <- list(rep(0, 12), rep(0, 12), rep(0, 12))
devs <- c(100000, 100000, 100000)
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb", contador, FALSE)
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb", contador, FALSE)
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb", contador, FALSE)
print("--------------")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
parametros[[1]] <- c(label, 'MBiases', f_MBi$par, rep(0,6))
devs[1] <- f_MBi$value
}, error = function(e) {
print("Optimizer didn't work for MBiases")
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
parametros[[2]] <- c(label, 'WSLS', f_WSLS$par, rep(0,3))
devs[2] <- f_WSLS$value
}, error = function(e) {
print("Optimizer didn't work for WSLS")
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
parametros[[3]] <- c(label, 'FRA', f_FRA$par)
devs[3] <- f_FRA$value
}, error = function(e) {
print("Optimizer didn't work for FRA")
})
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Dyad', 'Model',
'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta')
data$dev <- devs
return(data)
} # end fitModels2Data
###############################################################
# Fitting models to dyads...
###############################################################
parametros <- list(rep(0, 13), rep(0, 13))
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Dyad', 'Model',
'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta', 'dev')
data <- data[0,]
for (dyad in parejas) {
archivo <- paste("../Data/Dyads/output-", dyad, ".csv", sep="")
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
MB <- fitModels2Data(args, label=dyad)
data <- rbind(data, MB)
}
head(data)
archivo <- "../Data/humans_only_absent.csv"
df = read.csv(archivo)
parejas <- unique(df$Dyad)[1:3]
###############################################################
# Fitting models to dyads...
###############################################################
data <- as.data.frame(matrix(ncol = 13, nrow = 0))
names(data) <- c('Dyad', 'Model',
'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta', 'dev')
data <- data[0,]
data
for (dyad in parejas) {
archivo <- paste("../Data/Dyads/output-", dyad, ".csv", sep="")
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
MB <- fitModels2Data(args, label=dyad)
data <- rbind(data, MB)
}
head(data)
source("MODELpred.R")
fitModels2Data <- function(args, contador=0, label) {
Trials <- 1
parametros <- list(rep(0, 12), rep(0, 12), rep(0, 12))
devs <- c(100000, 100000, 100000)
f_MBi <- searchBestFit_MBiases(args, N=Trials, module="nmkb", contador, FALSE)
f_WSLS <- searchBestFit_WSLS(args, N=Trials, module="nmkb", contador, FALSE)
f_FRA <- searchBestFit_FRA(args, N=Trials, module="nmkb", contador, FALSE)
print("--------------")
tryCatch({
print(cat("MBiases dev: ",f_MBi$value))
imprimir(f_MBi$par)
parametros[[1]] <- c(label, 'MBiases', f_MBi$par, rep(0,6))
devs[1] <- f_MBi$value
}, error = function(e) {
print("Optimizer didn't work for MBiases")
})
print("--------------")
tryCatch({
print(cat("WSLS dev: ",f_WSLS$value))
imprimir(f_WSLS$par)
parametros[[2]] <- c(label, 'WSLS', f_WSLS$par, rep(0,3))
devs[2] <- f_WSLS$value
}, error = function(e) {
print("Optimizer didn't work for WSLS")
})
print("--------------")
tryCatch({
print(cat("FRA dev: ",f_FRA$value))
imprimir(f_FRA$par)
parametros[[3]] <- c(label, 'FRA', f_FRA$par)
devs[3] <- f_FRA$value
}, error = function(e) {
print("Optimizer didn't work for FRA")
})
data <- as.data.frame(do.call(rbind, parametros))
names(data) <- c('Dyad', 'Model',
'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta')
data$dev <- devs
return(data)
} # end fitModels2Data
archivo <- "../Data/humans_only_absent.csv"
df = read.csv(archivo)
parejas <- unique(df$Dyad)
###############################################################
# Fitting models to dyads...
###############################################################
data <- as.data.frame(matrix(ncol = 13, nrow = 0))
names(data) <- c('Dyad', 'Model',
'wA', 'wN', 'wL', 'wI',
'alpha', 'beta', 'gamma',
'delta', 'epsilon', 'zeta', 'dev')
for (dyad in parejas) {
archivo <- paste("../Data/Dyads/output-", dyad, ".csv", sep="")
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
MB <- fitModels2Data(args, label=dyad)
data <- rbind(data, MB)
}
write.csv(data, 'dyads-fitted.csv', row.names = FALSE)
seq(0, 0)
a <- seq(0, 1)
a
a <- seq(0, 0)
for (contador in a) {
archivo <- paste("../Data/Confusion/Simulations/MB", contador, ".csv", sep="")
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
rotulo <- paste('MB', contador, sep="")
MB <- fitModels2Data(args, rotulo)
archivo <- paste("../Data/Confusion/Simulations/WS", contador, ".csv", sep="")
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
rotulo <- paste('WS', contador, sep="")
WS <- fitModels2Data(args, rotulo)
archivo <- paste("../Data/Confusion/Simulations/FR", contador, ".csv", sep="")
print(paste("Loading and preparing data", archivo, "..."))
df = read.csv(archivo)
df$Region <- df$Category
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
rotulo <- paste('FR', contador, sep="")
FR <- fitModels2Data(args, rotulo)
}
setwd("~/Repositorios/DCL-DataAnalysis/R codes")
library(dplyr)
df1 = read.csv('../Data/humans_only_absent.csv')
head(df1)
byseveral <- dplyr::group_by(df1, Dyad)
regionsAll <- dplyr::summarize(byseveral, DLMean = mean(DLIndex), DLsd = sd(DLIndex), DLMax = max(DLIndex))
head(regionsAll)
m <- mean(df1$DLIndex)
regionsAll$Division <- apply(regionsAll, 1, function(x) {
dyad <- as.character(x[1])
me <- as.double(x[2])
ma <- as.double(x[4])
if (me > m) {
dat1 <- df1[which(df1$Dyad == dyad), ]
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
#    head(dat2)
regs <- unique(dat2$Distancias)
return(paste(regs, collapse="-"))
} else {return('No DL')}
})
head(regionsAll)
regions <- regionsAll[which(regionsAll$DLMean > m), ]
byseveral <- dplyr::group_by(regions, Dyad)
regions <- dplyr::summarize(byseveral, DLMean = unique(DLMean), Division = paste(Division, collapse="-"))
print(dim(regions))
regions$DL <- rep('?', 26)
print(dim(regions))
regions$DL <- rep('?', 24)
regions$DL[1] <- 'Inside-Outside'
regions$DL <- rep('?', 24)
regions$DL[1] <- 'Inside-Outside'
regions$DL[2:4] <- 'Top-Bottom'
regions$DL[5] <- 'Mix'
regions$DL[6] <- 'Top-Bottom'
regions$DL[7] <- 'All-Nothing'
regions$DL[8] <- 'Top-Bottom'
regions$DL[9:10] <- 'All-Nothing'
regions$DL[11:12] <- 'Left-Right'
regions$DL[13] <- 'All-Nothing'
regions$DL[14] <- 'Left-Right'
regions$DL[15:16] <- 'All-Nothing'
regions$DL[17:18] <- 'Top-Bottom'
regions$DL[19:21] <- 'Left-Right'
regions$DL[22:23] <- 'Top-Bottom'
regions$DL[24] <- 'All-Nothing'
regions$DL[25:26] <- 'Left-Right'
regions[1:13, ]
regions[14:26, ]
head(regions)
df1 = read.csv("../Data/humans_only_absent.csv")
library(dplyr)
df1 = read.csv("../Data/humans_only_absent.csv")
head(df1)
byseveral <- dplyr::group_by(df1, Dyad)
regionsAll <- dplyr::summarize(byseveral, DLMean = mean(DLIndex), DLsd = sd(DLIndex), DLMax = max(DLIndex))
head(regionsAll)
m <- mean(df1$DLIndex)
m
regionsAll$Division <- apply(regionsAll, 1, function(x) {
dyad <- as.character(x[1])
me <- as.double(x[2])
ma <- as.double(x[4])
if (me > m) {
dat1 <- df1[which(df1$Dyad == dyad), ]
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
#    head(dat2)
regs <- unique(dat2$Distancias)
return(paste(regs, collapse="-"))
} else {return('No DL')}
})
head(regionsAll)
dyad
dat1 <- df1[which(df1$Dyad == dyad), ]
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
me
ma
dat1
setwd("~/Repositorios/DCL-DataAnalysis/R codes")
library(dplyr)
df1 = read.csv("../Data/humans_only_absent.csv")
head(df1)
byseveral <- dplyr::group_by(df1, Dyad)
regionsAll <- dplyr::summarize(byseveral, DLMean = mean(DLIndex), DLsd = sd(DLIndex), DLMax = max(DLIndex))
head(regionsAll)
m <- mean(df1$DLIndex)
m
m <- 0.65
regionsAll$Division <- apply(regionsAll, 1, function(x) {
dyad <- as.character(x[1])
me <- as.double(x[2])
ma <- as.double(x[4])
if (me > m) {
dat1 <- df1[which(df1$Dyad == dyad), ]
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
#    head(dat2)
regs <- unique(dat2$Distancias)
return(paste(regs, collapse="-"))
} else {return('No DL')}
})
head(regionsAll)
x <- regionsAll[1]
x
x <- regionsAll[, 1]
x
byseveral <- dplyr::group_by(df1, Dyad)
regionsAll <- dplyr::summarize(byseveral, DLMean = mean(DLIndex), DLsd = sd(DLIndex), DLMax = max(DLIndex))
head(regionsAll)
x
x <- regionsAll[1, ]
x
dyad <- as.character(x[1])
me <- as.double(x[2])
ma <- as.double(x[4])
me
ma
dat1 <- df1[which(df1$Dyad == dyad), ]
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
dat2
df1 = read.csv("../Data/humans_only_absent.csv")
head(df1)
dat1 <- df1[which(df1$Dyad == dyad), ]
dat1
dyad
x <- regionsAll[1, ]
x
dyad <- as.character(x[1])
dyad
x <- regionsAll[1, ]
x
x[1]
as.character(x[1])
dyad <- x[1]
dyad
me <- as.double(x[2])
ma <- as.double(x[4])
if (me > m) {
dat1 <- df1[which(df1$Dyad == dyad), ]
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
#    head(dat2)
regs <- unique(dat2$Distancias)
return(paste(regs, collapse="-"))
} else {return('No DL')}
dat1 <- df1[which(df1$Dyad == dyad), ]
x <- regionsAll[1, ]
dyad <- x[1]
me <- as.double(x[2])
ma <- as.double(x[4])
dat1 <- df1[which(df1$Dyad == dyad), ]
as.character(x[1])
x <- regionsAll[1, ]
x[1]
dyad <- as.character(x[1])
dyad
x[1]
typeof(x[1])
dyad <- as.character(.unlist(x[1]))
dyad <- as.character(unlist(x[1]))
dyad
dyad <- as.character(unlist(x[1])[1])
dyad
dyad <- as.character(unlist(x[1])[[1]])
dyad
dyad <- as.character(unlist(x[1])[[1]])
dyad
dyad <- as.character(unlist(x[1])[[1]])
me <- as.double(x[2])
ma <- as.double(x[4])
dat1 <- df1[which(df1$Dyad == dyad), ]
dat1
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
dat2
#    head(dat2)
regs <- unique(dat2$Distancias)
paste(regs, collapse="-")
dat2$Distancias
dat2$Category
dyad <- as.character(unlist(x[1])[[1]])
me <- as.double(x[2])
ma <- as.double(x[4])
dat1 <- df1[which(df1$Dyad == dyad), ]
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
#    head(dat2)
regs <- unique(dat2$Category)
regs
paste(regs, collapse="-")
regionsAll$Division <- apply(regionsAll, 1, function(x) {
dyad <- as.character(unlist(x[1])[[1]])
me <- as.double(x[2])
ma <- as.double(x[4])
if (me > m) {
dat1 <- df1[which(df1$Dyad == dyad), ]
#    head(dat1)
dat2 <- dat1[which(df1$DLIndex == ma), ]
#    head(dat2)
regs <- unique(dat2$Category)
return(paste(regs, collapse="-"))
} else {return('No DL')}
})
head(regionsAll)
regions <- regionsAll[which(regionsAll$DLMean > m), ]
byseveral <- dplyr::group_by(regions, Dyad)
regions <- dplyr::summarize(byseveral, DLMean = unique(DLMean), Division = paste(Division, collapse="-"))
print(dim(regions))
regions$DL <- rep('?', 26)
regions$DL[1] <- 'Inside-Outside'
regions$DL[2:4] <- 'Top-Bottom'
regions$DL[5] <- 'Mix'
regions$DL[6] <- 'Top-Bottom'
regions$DL[7] <- 'All-Nothing'
regions$DL[8] <- 'Top-Bottom'
regions$DL[9:10] <- 'All-Nothing'
regions$DL[11:12] <- 'Left-Right'
regions$DL[13] <- 'All-Nothing'
regions$DL[14] <- 'Left-Right'
regions$DL[15:16] <- 'All-Nothing'
regions$DL[17:18] <- 'Top-Bottom'
regions$DL[19:21] <- 'Left-Right'
regions$DL[22:23] <- 'Top-Bottom'
regions$DL[24] <- 'All-Nothing'
regions$DL[25:26] <- 'Left-Right'
regions[1:13, ]
regions[14:26, ]
head(regions)
dyadsHigh <- unique(regions$Dyad)
regionsAll$DL <- unlist(lapply(regionsAll$Dyad, function(x) {
dyad <- as.character(x[1])
if (dyad %in% dyadsHigh) {
r <- as.character(regions$DL[which(regions$Dyad == dyad)])
return(r)
} else {return('RS')}
}))
head(regionsAll)
regionsAll$DL[11] <- 'Nothing-Nothing'
regionsAll$DL[24] <- 'Nothing-Nothing'
regionsAll$DL[42] <- 'Nothing-Nothing'
regionsAll$DL[5] <- 'All-All'
write.csv(regionsAll, file = 'classificationDL.csv', row.names = FALSE)
write.csv(regionsAll, file = '../Data/classificationDL.csv', row.names = FALSE)
regionsAll
