setwd("~/Repositorios/SODCL/R")
library(ggplot2)
library(gridExtra)
#df1 = read.csv("../Data/humans_full.csv")
df1 = read.csv("../Data/humans_only_absent.csv")
head(df1)
# Check the performance on the first round, as if one-shot task
DLIRound60 <- df1$DLIndex[which(df1$Round == 59)]
mean(DLIRound60)
sd(DLIRound60)
n <- length(DLIRound60)
print(paste("Number of trials last round:", n))
DLIRound1 <- df1$DLIndex[which(df1$Round == 1)]
mean(DLIRound1)
sd(DLIRound1)
library(ggplot2)
df1 = read.csv("../Data/humans_only_absent.csv")
df1 <- df1[complete.cases(df1), ]
# Regressing Consistency(n) w.r.t. Score(n-1)
model1h <- lm(Consistency ~ Norm_Score_LAG1, data = df1)
summary(model1h) # => Positive correlation is significant
summary(model1h) # => Positive correlation is significant
g1 <- ggplot(df1, aes(Norm_Score_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
theme_bw() +
xlab("Normalized score on Round n-1") +
ylab("Consistency on Round n") +
geom_smooth(method = lm)
g1
ggsave("ConsistencyWRTScore.eps", width=3.5, height=3.5, device=cairo_ps, g1)
g1
ggsave("ConsistencyWRTScore.eps", width=3.5, height=3.5, device=cairo_ps, g1)
g1
# Regressing Consistency(n) w.r.t. Score(n-1)
model1h <- lm(Consistency ~ Score_LAG1, data = df1)
summary(model1h) # => Positive correlation is significant
# Regressing Consistency(n) w.r.t. Score(n-1)
model1h <- lm(Consistency ~ Score_LAG1, data = df1)
summary(model1h) # => Positive correlation is significant
g1 <- ggplot(df1, aes(Score_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
theme_bw() +
xlab("Score(n-1)") +
ylab("Consistency(n)") +
geom_smooth(method = lm)
g1
ggsave("ConsistencyWRTScore.eps", width=3.5, height=3.5, device=cairo_ps, g1)
g1
ggsave("ConsistencyWRTScore.pdf", width=3.5, height=3.5, pdi=1200, g1)
ggsave("ConsistencyWRTScore.pdf", width=3.5, height=3.5, dpi=1200, g1)
ggsave("ConsistencyWRTScore.pdf", width=2.5, height=2.5, dpi=1200, g1)
ggsave("ConsistencyWRTScore.pdf", width=1.5, height=1.5, dpi=1200, g1)
ggsave("ConsistencyWRTScore.pdf", width=2, height=2, dpi=1200, g1)
library(sjPlot)
library(sjmisc)
library(ggplot2)
df1 = read.csv("../Data/humans_only_absent.csv")
df1 <- df1[complete.cases(df1), ]
# Regressing Consistency w.r.t. max similarity to focal region
model4h <- lm(Consistency ~ Distancias_LAG1, data = df1)
# Regressing Consistency w.r.t. max similarity to focal region
model4h <- lm(Consistency ~ Similarity_LAG1, data = df1)
# Regressing Consistency w.r.t. max similarity to focal region
model4h <- lm(Consistency ~ Similarity_LAG1, data = df1)
summary(model4h) # => Positive correlation is significant
summary(model4h) # => Positive correlation is significant
g3 <- ggplot(df1, aes(log(Similarity_LAG1), Consistency)) +
geom_point(alpha = 1/8) +
xlab("Log of max similarity w.r.t.\nfocal regions on Round n-1") +
ylab("Consistency on Round n") +
geom_smooth(method = lm)
g3 <- g3 + theme_sjplot()
g3
ggsave("ConsistencyWRTDist2FR.pdf", width=2, height=2, dpi=1200, g3)
g3 <- ggplot(df1, aes(Similarity_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
xlab("Log of max similarity w.r.t.\nfocal regions on Round n-1") +
ylab("Consistency on Round n") +
geom_smooth(method = lm)
g3 <- g3 + theme_sjplot()
g3
g3 <- ggplot(df1, aes(Similarity_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
xlab("Max sim. w.r.t.\nfocal regions(n-1)") +
ylab("Consistency(n") +
geom_smooth(method = lm)
g3 <- g3 + theme_sjplot()
g3
ggsave("ConsistencyWRTDist2FR.pdf", width=2, height=2, dpi=1200, g3)
g3 <- ggplot(df1, aes(Similarity_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
xlab("Max sim. w.r.t.\nfocal regions(n-1)") +
ylab("Consistency(n)") +
geom_smooth(method = lm)
g3 <- g3 + theme_sjplot()
g3
ggsave("ConsistencyWRTDist2FR.pdf", width=2, height=2, dpi=1200, g3)
g3 <- ggplot(df1, aes(Similarity_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
xlab("Max sim. w.r.t.\nfocal regions(n-1)") +
ylab("Consistency(n)") +
geom_smooth(method = lm)
g3
g3 <- ggplot(df1, aes(Similarity_LAG1, Consistency)) +
geom_point(alpha = 1/8) +
theme_bw() +
xlab("Max sim. w.r.t.\nfocal regions(n-1)") +
ylab("Consistency(n)") +
geom_smooth(method = lm)
g3
ggsave("ConsistencyWRTDist2FR.pdf", width=2, height=2, dpi=1200, g3)
df1 = read.csv("../Data/humans_only_absent.csv")
df1 <- df1[complete.cases(df1), ]
# Regressing DLIndex w.r.t. Consistency
model2h <- lm(DLIndex ~ Consistency, data = df1)
summary(model2h) # => Positive correlation is significant
# Regressing DLIndex w.r.t. Consistency with interaction between Joint(n-1) and Dif_Consist
model3h <- lm(DLIndex ~ Consistency + Dif_consist*Joint_LAG1, data = df1)
summary(model3h) # => Positive interaction is significant
anova(model2h, model3h) # => interaction effect significantly adds over main effect
g2 <- plot_model(model3h,
type = "pred",
terms = c("Dif_consist", "Joint_LAG1"),
colors = c("black", "red", "blue"),
title = "",
legend.title = "Overlap",
axis.title = c("Absolute difference\nin consistency", "DLindex"))
g2
df1 = read.csv("../Data/humans_only_absent.csv")
df1 <- df1[complete.cases(df1), ]
# Regressing Consistency w.r.t. max similarity to focal region
model4h <- lm(Consistency ~ Similarity_LAG1, data = df1)
summary(model4h) # => Positive correlation is significant
summary(model4h) # => Positive correlation is significant
library(ggplot2)
df1 = read.csv("../Data/humans_only_absent.csv")
df1 <- df1[complete.cases(df1), ]
# Regressing Consistency(n) w.r.t. Score(n-1)
model1h <- lm(Consistency ~ Score_LAG1, data = df1)
summary(model1h) # => Positive correlation is significant
source("Model_Plots.R")
setwd("~/Repositorios/DCL-DataAnalysis/R codes")
source("Model_Plots.R")
library(janitor)
library(dplyr)
library(ggplot2)
library(gridExtra)
Columns <- c('Model', 'Num',
'wALL', 'wNOTHING', 'wLEFT', 'wIN',
'Alpha', 'Beta', 'Gamma',
'Delta', 'Epsilon', 'Zeta', 'Dev')
fittedPars <- data.frame(t(c('MB', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
colnames(fittedPars) <- Columns
fittedPars <- fittedPars[-1, ]
a <- seq(0, 2)
for (contador in a) {
pars <- c('MB', contador, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
rotulo <- paste('MB', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/MBiases_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$par <- as.double(df$par)
aux <- df$par
pars[3:6] <- aux
pars[13] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedPars <- rbind(fittedPars, aux)
}
Columns <- c('Model', 'Num',
'wALL', 'wNOTHING', 'wLEFT', 'wIN',
'Alpha', 'Beta', 'Gamma',
'Delta', 'Epsilon', 'Zeta', 'Dev')
fittedPars <- data.frame(t(c('MB', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)))
colnames(fittedPars) <- Columns
fittedPars <- fittedPars[-1, ]
a <- seq(0, 9)
for (contador in a) {
pars <- c('MB', contador, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
rotulo <- paste('MB', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/MBiases_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$par <- as.double(df$par)
aux <- df$par
pars[3:6] <- aux
pars[13] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedPars <- rbind(fittedPars, aux)
}
for (contador in a) {
pars <- c('WS', contador, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
rotulo <- paste('WS', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/WSLS_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$par <- as.double(df$par)
aux <- df$par
pars[3:9] <- aux
pars[13] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedPars <- rbind(fittedPars, aux)
}
for (contador in a) {
pars <- c('FR', contador, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
rotulo <- paste('FR', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/FRA_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$par <- as.double(df$par)
aux <- df$par
pars[3:12] <- aux
pars[13] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedPars <- rbind(fittedPars, aux)
}
fittedPars$Exp <- as.character("Fitted")
fittedPars <- fittedPars %>%
select('Num', 'Model',
'wALL', 'wNOTHING', 'wLEFT', 'wIN',
'Alpha', 'Beta', 'Gamma',
'Delta', 'Epsilon', 'Zeta', 'Exp')
head(fittedPars)
archivo <- '../Data/Confusion/Simulations/sim_data_rel.csv'
realPars = read.csv(archivo)
realPars$Exp <- as.character("Real")
head(realPars)
dim(fittedPars)
dim(realPars)
# realPars <- realPars[1:16, ]
df <- rbind(realPars, fittedPars)
head(df)
data <- df
data$wALL <- as.double(data$wALL)
data$wNOTHING <- as.double(data$wNOTHING)
data$wLEFT <- as.double(data$wLEFT)
data$wIN <- as.double(data$wIN)
data$Alpha <- as.double(data$Alpha)
data$Beta <- as.double(data$Beta)
data$Gamma <- as.double(data$Gamma)
data$Delta <- as.double(data$Delta)
data$Epsilon <- as.double(data$Epsilon)
data$Zeta <- as.double(data$Zeta)
data <- data[order(data$Model, data$Num), ]
head(data)
data_MB <- data[data$Model == 'MB', ]
data_WS <- data[data$Model == 'WS', ]
data_FR <- data[data$Model == 'FR', ]
# Drawing parameter fit biases
p1 <- plot_Parameter_Recovery_Biases(data_MB, "MBiases")
p2 <- plot_Parameter_Recovery_Biases(data_WS, "WSLS")
p3 <- plot_Parameter_Recovery_Biases(data_FR, "FRA")
pMBiases <- grid.arrange(p1, p2, p3, nrow=3)
# Drawing parameter fit WSLS
p1 <- plot_Parameter_Recovery_WSLS(data_WS, "WSLS")
p2 <- plot_Parameter_Recovery_WSLS(data_FR, "FRA")
pWSLS <- grid.arrange(p1, p2, nrow=2)
Columns <- c('ModelReal', 'Num', 'ModelFitted', 'Dev')
fittedDev <- data.frame(t(c('MB', 0, 'MB', 0)))
colnames(fittedDev) <- Columns
fittedDev <- fittedDev[-1, ]
a <- seq(0, 9)
for (contador in a) {
pars <- c('MB', contador, 'MB', 0)
rotulo <- paste('MB', contador, sep="")
archivo <- paste("MBiases_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('MB', contador, 'WS', 0)
rotulo <- paste('WS', contador, sep="")
archivo <- paste("MBiases_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('MB', contador, 'FR', 0)
rotulo <- paste('FR', contador, sep="")
archivo <- paste("MBiases_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('WS', contador, 'MB', 0)
rotulo <- paste('MB', contador, sep="")
archivo <- paste("WSLS_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('WS', contador, 'WS', 0)
rotulo <- paste('WS', contador, sep="")
archivo <- paste("WSLS_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('WS', contador, 'FR', 0)
rotulo <- paste('FR', contador, sep="")
archivo <- paste("WSLS_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('FR', contador, 'MB', 0)
rotulo <- paste('MB', contador, sep="")
archivo <- paste("FRA_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('FR', contador, 'WS', 0)
rotulo <- paste('WS', contador, sep="")
archivo <- paste("FRA_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('FR', contador, 'FR', 0)
rotulo <- paste('FR', contador, sep="")
archivo <- paste("FRA_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
}
for (contador in a) {
pars <- c('MB', contador, 'MB', 0)
rotulo <- paste('MB', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/MBiases_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('MB', contador, 'WS', 0)
rotulo <- paste('WS', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/MBiases_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('MB', contador, 'FR', 0)
rotulo <- paste('FR', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/MBiases_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('WS', contador, 'MB', 0)
rotulo <- paste('MB', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/WSLS_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('WS', contador, 'WS', 0)
rotulo <- paste('WS', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/WSLS_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('WS', contador, 'FR', 0)
rotulo <- paste('FR', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/WSLS_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('FR', contador, 'MB', 0)
rotulo <- paste('MB', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/FRA_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('FR', contador, 'WS', 0)
rotulo <- paste('WS', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/FRA_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
pars <- c('FR', contador, 'FR', 0)
rotulo <- paste('FR', contador, sep="")
archivo <- paste("../Data/Confusion/Estimations/FRA_Parameter_fit_nmkb_", rotulo, ".csv", sep="")
df = read.csv(archivo)
df$value <- as.double(df$value)
pars[4] <- unique(df$value)
aux <- data.frame(t(pars))
colnames(aux) <- Columns
fittedDev <- rbind(fittedDev, aux)
}
head(fittedDev)
aux <- fittedDev
fittedDev <- aux
fittedDev$Num <- type.convert(fittedDev$Num)
fittedDev$Dev <- type.convert(fittedDev$Dev)
fittedDev$Simulated_Model <- factor(fittedDev$ModelReal,
levels=c('MB', 'WS', 'FR'))
fittedDev$ModelFitted <- factor(fittedDev$ModelFitted,
levels=c('MB', 'WS', 'FR'))
fittedDev <- fittedDev %>%
dplyr::group_by(Num, Simulated_Model) %>%
dplyr::summarize(Fit_Model = which(Dev == min(Dev)))
fittedDev
fittedDev <- fittedDev %>%
dplyr::group_by(Num, Simulated_Model) %>%
dplyr::summarize(Fit_Model = which(Dev == min(Dev)))
fittedDev <- fittedDev %>%
dplyr::group_by(Num, Simulated_Model) %>%
dplyr::summarize(Fit_Model = which(Dev == min(Dev))[0])
fittedDev <- fittedDev %>%
dplyr::group_by(Num, Simulated_Model) %>%
dplyr::summarize(Fit_Model = which(Dev == min(Dev))[1])
fittedDev$Fit_Model <- lapply(fittedDev$Fit_Model, function(x) {
if(x==1) {
return('MB')
} else if(x==2) {
return('WS')
} else if(x==3) {
return('FR')
}
})
fittedDev$Fit_Model <- unlist(fittedDev$Fit_Model)
fittedDev$Fit_Model <- factor(fittedDev$Fit_Model,
levels=c('MB', 'WS', 'FR'))
head(fittedDev)
table(fittedDev[2:3])
source("WSpred.R")
source("MODELpred.R")
source("Model_Plots.R")
source("WSpred.R")
source("MODELpred.R")
source("Model_Plots.R")
library(dfoptim)
library(bbmle)
library(beepr)
archivo <- "../Data/Confusion/Simulations/WS0.csv"
df = read.csv(archivo, na.strings=c("","NA"))
df$Region <- df$Category
args <- getFreq(df)
args
archivo <- "../Data/Confusion/Simulations/WS0.csv"
df = read.csv(archivo, na.strings=c("","NA"))
df <- df[1:50, ]
df$Region <- df$Category
args <- getFreq(df)
f <- searchBestFit_WSLS(args, 5)
args <- getFreq(df)
args
df <- find_joint_region(df)
df = read.csv(archivo, na.strings=c("","NA"))
df <- df[1:50, ]
df$Region <- df$Category
df <- find_joint_region(df)
df = read.csv(archivo, na.strings=c("","NA"))
df <- df[1:50, ]
df$Region <- df$Category
df <- find_joint_region(df)
source("MODELpred.R")
source("MODELpred.R")
df <- find_joint_region(df)
df = read.csv(archivo, na.strings=c("","NA"))
df$Region <- df$Category
df <- find_joint_region(df)
df <- df[1:50, ]
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
args <- getFreqFRA(df, theta)
head(args)
df = read.csv(archivo, na.strings=c("","NA"))
df <- df[1:50, ]
df$Region <- df$Category
args1 <- getFreq(df)
args1
