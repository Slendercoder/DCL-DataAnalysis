'Consistency',
'Category',
'Norm_Score_LAG1',
#        'Similarity_LAG1',
'Exp')],
df3[c('Round',
'DLIndex',
'Consistency',
'Category',
'Norm_Score_LAG1',
#        'Similarity_LAG1',
'Exp')]
)
df$Exp <- as.factor(df$Exp)
df$Exp <- factor(df$Exp, levels = c('Model', 'Full data', 'Only unicorn absent'))
head(df)
# levels(df$Exp)
# Summarize data
dfc_DLIndex <- summarySE(df, measurevar="DLIndex", groupvars=c("Exp", "Round"))
head(dfc_DLIndex)
library(ggplot2)
library(gridExtra)
library(Rmisc)
get_legend<-function(myggplot){
tmp <- ggplot_gtable(ggplot_build(myggplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
# levels(df$Exp)
# Summarize data
dfc_DLIndex <- summarySE(df, measurevar="DLIndex", groupvars=c("Exp", "Round"))
head(dfc_DLIndex)
# Plot DLIndex with error regions
g1 <- ggplot(dfc_DLIndex, aes(x = Round, y = DLIndex, colour=Exp, group=Exp)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = DLIndex - sd,
ymax = DLIndex + sd), alpha = 0.2) +
scale_colour_manual(values = c("Model" = "#999999", "Full data" = "#E69F00", "Only unicorn absent" = "#56B4E9")) +
labs(color = "Source") +
xlab("Round (unicorn absent)") +
ylab("Division of labor") +
theme_bw()
g1
# Density plot
g2 <- ggplot(df, aes(DLIndex, colour=Exp, group=Exp)) +
geom_density(size=1) +
scale_colour_manual(values = c("Model" = "#999999", "Full data" = "#E69F00", "Only unicorn absent" = "#56B4E9")) +
#  scale_y_continuous(limits = c(0, 5)) +
labs(color = "Source of data") +
theme_bw()
g2
df2 = read.csv("../Python Codes/fileFreqs.csv", na.strings=c("","NA"))
args2 <- getArgs(df2)
args2 <- args2[order(-args2$s, args2$i),]
args2 <- args2[c('pair', 'freq', 'sumFreq')]
head(args2)
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
head(args)
#dim(args)
head(args2)
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
df2 = read.csv("../Python Codes/fileFreqs.csv", na.strings=c("","NA"))
args2 <- getArgs(df2)
args2 <- args2[order(-args2$s, args2$i),]
args2 <- args2[c('pair', 'freq', 'sumFreq')]
head(args2)
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
df2 = read.csv("../Python Codes/fileFreqs.csv", na.strings=c("","NA"))
args2 <- getArgs(df2)
args2 <- args2[order(-args2$s, args2$i),]
args2 <- args2[c('pair', 'freq', 'sumFreq')]
head(args2)
df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
sum(unlist(args$sumFreq))
sum(unlist(args2$sumFreq))
df2 = read.csv("../Python Codes/fileFreqs.csv", na.strings=c("","NA"))
args2 <- getArgs(df2)
args2 <- args2[order(-args2$s, args2$i),]
args2 <- args2[c('pair', 'freq', 'sumFreq')]
head(args2)
#df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
sum(unlist(args$sumFreq))
sum(unlist(args2$sumFreq))
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
# To search for best parameters WSLS model with mle2
fitresWSLS <- mle2(minuslogl=WSutil1,
start=list(a=0.1,b=1),
lower=c(a=0,b=.01),
upper=c(a=1.5,b=200),
method="L-BFGS-B")
print(summary(fitresWSLS))
# To search for best parameters WSLS model with optim
w1 <- 0.1 # w
w2 <- 10 # win stay
fitresWSLS <- nmkb(par=c(w1, w2),
fn = function(theta) WSutil(c(theta, 10, 31, 0, 0, 0, 0), args2, regiones),
lower=c(0,
0),
upper=c(1.5,
200),
control=list(trace=0))
#beep()
print(fitresWSLS$par)
print(fitresWSLS$value)
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
# To search for best parameters WSLS model with mle2
fitresWSLS <- mle2(minuslogl=WSutil1,
start=list(a=0.1,b=1),
lower=c(a=0,b=.01),
upper=c(a=1.5,b=200),
method="L-BFGS-B")
print(summary(fitresWSLS))
df2 = read.csv("../Python Codes/fileFreqs.csv", na.strings=c("","NA"))
args2 <- getArgs(df2)
args2 <- args2[order(-args2$s, args2$i),]
args2 <- args2[c('pair', 'freq', 'sumFreq')]
head(args2)
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
df2 = read.csv("../Python Codes/fileFreqs.csv", na.strings=c("","NA"))
args2 <- getArgs(df2)
args2 <- args2[order(-args2$s, args2$i),]
args2 <- args2[c('pair', 'freq', 'sumFreq')]
head(args2)
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
#df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
#df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
#df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
df1 = read.csv("../Python Codes/output_Prev.csv", na.strings=c("","NA"))
# df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category1
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
# To search for best parameters WSLS model with mle2
fitresWSLS <- mle2(minuslogl=WSutil1,
start=list(a=0.1,b=1),
lower=c(a=0,b=.01),
upper=c(a=1.5,b=200),
method="L-BFGS-B")
print(summary(fitresWSLS))
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
# To search for best parameters WSLS model with mle2
fitresWSLS <- mle2(minuslogl=WSutil1,
start=list(a=0.1,b=1),
lower=c(a=0,b=.01),
upper=c(a=1.5,b=200),
method="L-BFGS-B")
print(summary(fitresWSLS))
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
sum(unlist(args$sumFreq))
sum(unlist(args2$sumFreq))
# To search for best parameters WSLS model with mle2
fitresWSLS <- mle2(minuslogl=WSutil1,
start=list(a=0.1,b=1),
lower=c(a=0,b=.01),
upper=c(a=1.5,b=200),
method="L-BFGS-B")
print(summary(fitresWSLS))
df1 = read.csv("../Python Codes/output1.csv", na.strings=c("","NA"))
df1 <- df1[complete.cases(df1), ]
df1$Region <- df1$Category
a <- df1[df1$Is_there == 'Unicorn_Present', ]
#df1$sL <- lapply(df1$Score, function(x) {
#  s <- as.numeric(x)
#  if(s < 31){
#    return(1)
#  } else {
#    return(2)
#  }
#})
# df1$Score <- df1$sL
df1 <- df1[c('Dyad', 'Player', 'Region', 'Score', 'RegionGo')]
head(df1)
args <- getArgs(df1)
args <- args[order(-args$s, args$i),]
args <- args[c('pair', 'freq', 'sumFreq')]
#args
#args <- args[args$i != 'RS', ]
head(args)
#dim(args)
head(args2)
sum(unlist(args$sumFreq))
sum(unlist(args2$sumFreq))
# To search for best parameters WSLS model with mle2
fitresWSLS <- mle2(minuslogl=WSutil1,
start=list(a=0.1,b=1),
lower=c(a=0,b=.01),
upper=c(a=1.5,b=200),
method="L-BFGS-B")
print(summary(fitresWSLS))
