source("FRApred.R")
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
#archivo <- "../Python Codes/Simulations/N1_full.csv"
#archivo <- "../Python Codes/Dyads/output-435-261.csv"
archivo <- "output-435-261.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
setwd("~/Repositorios/DCL-DataAnalysis/R codes")
source("FRApred.R")
library(beepr)
#archivo <- "../Python Codes/Simulations/M5_full.csv"
#archivo <- "../Python Codes/Simulations/N1_full.csv"
#archivo <- "../Python Codes/Dyads/output-435-261.csv"
archivo <- "output-435-261.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
f <- searchBestFit(args, 1, modulo="MLE2")
print(f$message)
f <- searchBestFit(args, 1, modulo="MLE2")
f <- searchBestFit(args, 1, module="MLE2")
print(f$message)
print(paste("Dev:", f$value))
print(imprimir(f$par))
beep()
f <- searchBestFit(args, 10, module="MLE2")
print(f$message)
print(paste("Dev:", f$value))
print(imprimir(f$par))
source("FRApred.R")
f <- searchBestFit(args, 10, module="MLE2")
f <- searchBestFit(args, 10, module="mle2")
source("FRApred.R")
f <- searchBestFit(args, 10, module="mle2")
print(f$message)
source("FRApred.R")
f <- searchBestFit(args, 1, module="mle2")
source("FRApred.R")
f <- searchBestFit(args, 1, module="mle2")
f <- searchBestFit(args, N=1, module="mle2")
source("FRApred.R")
f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="optim")
print(f$message)
print(paste("Dev:", f$value))
print(imprimir(f$par))
c <- "1"
a <- tryCatch({
3*c
}, error = function(e){
print(paste("Error:", e))
return(0)
})
c <- "1"
a <- tryCatch({
3*c
}, error = function(e){
print(e)
return(0)
})
c <-1
a <- tryCatch({
3*c
}, error = function(e){
print(paste("Error:", e))
return(0)
})
c <- "1"
a <- tryCatch({
3*c
}, error = function(e){
print(paste("Error:", e))
return(0)
})
print(paste("Result:", a))
besties <- rep(0, N)
besties <- rep(0, 5)
besties
f <- searchBestFit(args, N=1, module="optim")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="optim")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="optim")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="optim")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="optim")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
print(f$message)
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
f <- searchBestFit(args, N=1, module="mle2")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
f <- searchBestFit(args, N=1, module="mle2")
f <- searchBestFit(args, N=1, module="nmkb")
f <- searchBestFit(args, N=10, module="nmkb")
source("FRApred.R")
f <- searchBestFit(args, N=1, module="mle2")
source("FRApred.R")
f <- searchBestFit(args, N=10, module="mle2")
source("FRApred.R")
f <- searchBestFit(args, N=10, module="nmkb")
source("FRApred.R")
#f <- searchBestFit(args, N=10, module="mle2")
f <- searchBestFit(args, N=10, module="nmkb")
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
#archivo <- "../Python Codes/Dyads/output-435-261.csv"
#archivo <- "output-435-261.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
f <- searchBestFit(args, N=10, module="nmkb")
source("FRApred.R")
f <- searchBestFit(args, N=1, module="nmkb")
print(head(args))
source("FRApred.R")
f <- searchBestFit(args, N=1, module="nmkb")
print(head(args))
print(head(args$FRASims))
print(head(args$fr))
print(head(args$freqs))
source("FRApred.R")
f <- searchBestFit(args, N=1, module="nmkb")
f <- searchBestFit(args, N=1, module="nmkb")
source("FRApred.R")
f <- searchBestFit(args, N=1, module="nmkb")
print("Loading and preparing the data...")
#archivo <- "../Python Codes/Simulations/M5_full.csv"
#archivo <- "../Python Codes/Simulations/N1_full.csv"
#archivo <- "../Python Codes/Dyads/output-435-261.csv"
archivo <- "output-435-261.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
f <- searchBestFit(args, N=1, module="mle2")
source("FRApred.R")
f <- searchBestFit(args, N=1, module="nmkb")
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
f <- searchBestFit(args, N=1, module="nmkb")
args <- get_FRASims_list(args)
print(head(args))
a <- args[length(args$FRASims) > 9, ]
a
a <- args[which(length(args$FRASims) > 9), ]
a
a <- args[which(length(args$FRASims) > 10), ]
a
args$R <- length(args$FRASims)
print(head(args))
args$R <- lapply(args$FRASims, function(x) length(x))
print(head(args))
args$R <- lapply(args$FRASims, function(x) length(unlist(x)))
print(head(args))
print(head(args))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
a <- args[6, ]
a
print(a$FRASims)
a <- args[5, ]
print(a$FRASims)
6
a <- args[6, ]
print(a$FRASims)
print(a)
args <- get_FRASims(args)
args <- getFreqFRA(df, theta)
args <- get_FRASims(args)
a <- args[6, ]
print(a)
args <- args %>%
dplyr::mutate(FRASims = as.list(data.frame(c(FRASimALL,
FRASimNOTHING,
FRASimDOWN,
FRASimUP,
FRASimLEFT,
FRASimRIGHT,
FRASimIN,
FRASimOUT)))
) %>%
select(Region, RegionFULL, Score, RJcode, FRASims, freqs)
a <- args[6, ]
print(a)
args <- getFreqFRA(df, theta)
args <- get_FRASims(args)
aux <- aux %>%
dplyr::mutate(FRASims = as.list(data.frame(c(FRASimALL,
FRASimNOTHING,
FRASimDOWN,
FRASimUP,
FRASimLEFT,
FRASimRIGHT,
FRASimIN,
FRASimOUT)))
) %>%
select(Region, RegionFULL, Score, RJcode, FRASims, freqs)
aux <- args %>%
dplyr::mutate(FRASims = as.list(data.frame(c(FRASimALL,
FRASimNOTHING,
FRASimDOWN,
FRASimUP,
FRASimLEFT,
FRASimRIGHT,
FRASimIN,
FRASimOUT)))
) %>%
select(Region, RegionFULL, Score, RJcode, FRASims, freqs)
a <- args[6, ]
print(a)
a <- args[5, ]
print(a)
b <- aux[5, ]
print(b)
b <- aux[6, ]
print(b)
a <- args[5, ]
print(a)
a <- args[6, ]
print(a)
args$Score[6]
args$Score[6] <- -75
args$Score[6]
a <- args[6, ]
print(a)
aux <- args %>%
dplyr::mutate(FRASims = as.list(data.frame(c(FRASimALL,
FRASimNOTHING,
FRASimDOWN,
FRASimUP,
FRASimLEFT,
FRASimRIGHT,
FRASimIN,
FRASimOUT)))
) %>%
select(Region, RegionFULL, Score, RJcode, FRASims, freqs)
a <- args[6, ]
print(a)
b <- aux[6, ]
print(b)
b <- aux[5, ]
print(b)
source("FRApred.R")
print("Loading and preparing the data...")
#archivo <- "../Python Codes/Simulations/M5_full.csv"
archivo <- "../Python Codes/Simulations/N1_full.csv"
#archivo <- "../Python Codes/Dyads/output-435-261.csv"
#archivo <- "output-435-261.csv"
df = read.csv(archivo)
df <- find_joint_region(df)
df$RegionFULL <- unlist(df$RegionFULL)
df$RegionGo <- factor(df$RegionGo, levels = regiones)
print(head(df))
args <- getFreqFRA(df, theta)
args <- get_FRASims_list(args)
print(head(args))
beep()
f <- searchBestFit(args, N=1, module="nmkb")
